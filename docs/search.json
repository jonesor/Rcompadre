[{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with Rcompadre","text":"COMPADRE COMADRE Plant Animal Matrix Databases contain matrix population models (MPMs) associated metadata obtained published literature (Salguero-Gomez et al. 2015, 2016). Wherever possible full MPM (matrix) split three additional constituent matrices based nature demographic processes involved. U matrix, summarises growth survival; F matrix, summarises sexual reproduction; C matrix, summarises asexual (clonal) reproduction. additional matrices sum equal matrix (= U + F + C). Thus, MPM presented list 4 matrices databases together information MPM stages defined author. addition, set MPMs associated metadata including taxonomy species studied, geographic location, published source information . details please see two papers COMPADRE COMADRE (Salguero-Gomez et al. 2015, 2016), User Guide available via website (compadre-db.org/). databases distributed Rdata files containing list class object provides data structured format. Although possible use database without using Rcompadre package recommended. Rcompadre provides users range useful tools working database greatly improve user experience. Importantly, Rcompadre coerces data -called CompadreDB S4 class object. details means beyond scope vignette, apart object two slots called CompadreData VersionData. CompadreData contains tibble-style data frame includes list column matrix population models (MPMs) alongside associated metadata columns. element matrix column data frame (mat) contains list MPMs, remaining columns include metadata associated matrices, VersionData list information database version. practice, knowledge details structure necessary thanks tools provided Rcompadre package.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"obtaining-and-loading-the-data-","dir":"Articles","previous_headings":"","what":"Obtaining and loading the data.","title":"Getting started with Rcompadre","text":"get started first need download COMPADRE (COMADRE) dataset website compadre-db.org/. done can load R using load(). usually good idea set working directory point. Assuming working directory database file can load database like . ensure database correct class using as_cdb(): Alternatively, cdb_fetch() automatically download latest version COMPADRE COMADRE website, ensure correct class. example: vignette use sample COMPADRE data distributed package. dataset intended demonstration learning purposes used real analyses! can load like : can now ask summary object, tell us CompadreDB class S4 object. Simply typing name object (Compadre case) give brief summary contents display first rows data (tibble). Please see tibble vignette1 information object type, differs data.table. summary tells us successfully loaded data, 150 matrices. database also contains Version information can accessed using command VersionData(Compadre). includes information including version number, date created, link database user agreement.","code":"load(\"COMPADRE_v.4.0.1.RData\") compadre <- as_cdb(compadre) Compadre <- cdb_fetch(\"compadre\") data(Compadre) summary(Compadre) #>     Length      Class       Mode  #>          1 CompadreDB         S4 Compadre #> A COM(P)ADRE database ('CompadreDB') object with 110 SPECIES and 150 MATRICES. #>  #> # A tibble: 150 × 49 #>    mat        SpeciesAuthor  SpeciesAccepted CommonName Genus Family Order Class #>    <list>     <chr>          <chr>           <chr>      <chr> <fct>  <fct> <fct> #>  1 <CompdrMt> Setaria_incra… Setaria incras… NA         Seta… Poace… Poal… Lili… #>  2 <CompdrMt> Lechea_cernua  Lechea cernua   NA         Lech… Cista… Malv… Magn… #>  3 <CompdrMt> Actinostemon_… Actinostemon c… NA         Acti… Eupho… Malp… Magn… #>  4 <CompdrMt> Gaura_neomexi… Gaura neomexic… NA         Gaura Onagr… Myrt… Magn… #>  5 <CompdrMt> Eriogonum_lon… Eriogonum long… Buckwheat  Erio… Polyg… Cary… Magn… #>  6 <CompdrMt> Platanthera_h… Platanthera ho… NA         Plat… Orchi… Aspa… Lili… #>  7 <CompdrMt> Succisa_prate… Succisa praten… NA         Succ… Capri… Dips… Magn… #>  8 <CompdrMt> Haplopappus_r… Pyrrocoma radi… NA         Pyrr… Compo… Aste… Magn… #>  9 <CompdrMt> Astragalus_tr… Astragalus tre… NA         Astr… Legum… Faba… Magn… #> 10 <CompdrMt> Plantago_coro… Plantago coron… NA         Plan… Plant… Lami… Magn… #> # ℹ 140 more rows #> # ℹ 41 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, … VersionData(Compadre) #> $Version #> [1] \"X.X.X\" #>  #> $DateCreated #> [1] \"Nov_22_2017\" #>  #> $Agreement #> [1] \"http://www.compadre-db.org/Page/UserAgreement\""},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"exploring-the-data","dir":"Articles","previous_headings":"","what":"Exploring the data","title":"Getting started with Rcompadre","text":"database includes range metadata associated matrices including taxonomic information, geolocation, details publication matrix obtained . full description variables can found User Guide via COMPADRE website. list metadata can obtained simply using names() command, way data frame. element mat column contains list four matrices (, U, F, C) information matrix stages columns ordinary vectors. can explore information various ways, example, producing tables, histograms, plots variables interest.","code":"names(Compadre) #>  [1] \"mat\"                    \"SpeciesAuthor\"          \"SpeciesAccepted\"        #>  [4] \"CommonName\"             \"Genus\"                  \"Family\"                 #>  [7] \"Order\"                  \"Class\"                  \"Phylum\"                 #> [10] \"Kingdom\"                \"OrganismType\"           \"DicotMonoc\"             #> [13] \"AngioGymno\"             \"Authors\"                \"Journal\"                #> [16] \"YearPublication\"        \"DOI_ISBN\"               \"AdditionalSource\"       #> [19] \"StudyDuration\"          \"StudyStart\"             \"StudyEnd\"               #> [22] \"ProjectionInterval\"     \"NumberPopulations\"      \"MatrixCriteriaSize\"     #> [25] \"MatrixCriteriaOntogeny\" \"MatrixCriteriaAge\"      \"MatrixPopulation\"       #> [28] \"Lat\"                    \"Lon\"                    \"Altitude\"               #> [31] \"Country\"                \"Continent\"              \"Ecoregion\"              #> [34] \"StudiedSex\"             \"MatrixComposite\"        \"MatrixTreatment\"        #> [37] \"MatrixCaptivity\"        \"MatrixStartYear\"        \"MatrixStartSeason\"      #> [40] \"MatrixStartMonth\"       \"MatrixEndYear\"          \"MatrixEndSeason\"        #> [43] \"MatrixEndMonth\"         \"MatrixSplit\"            \"MatrixFec\"              #> [46] \"Observation\"            \"MatrixDimension\"        \"SurvivalIssue\"          #> [49] \"AnnualPeriodicity\" table(Compadre$DicotMonoc) #>  #> Eudicot Monocot  #>     108      37 hist(Compadre$StudyDuration, main = \"StudyDuration\") plot(Compadre$Lon, Compadre$Lat, main = \"Location\")"},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"finding-data-for-for-a-particular-species","dir":"Articles","previous_headings":"","what":"Finding data for for a particular species","title":"Getting started with Rcompadre","text":", example, want check species database can use cdb_check_species() function. example, can ask species Succisa pratensis present. function works vectors species names follows. Optionally, function can return subset database restricted matched species names.","code":"cdb_check_species(Compadre, \"Succisa pratensis\") #>             species in_db #> 1 Succisa pratensis  TRUE spList <- c(\"Succisa pratensis\", \"Onodrim ent\", \"Aster amellus\") cdb_check_species(Compadre, spList) #>             species in_db #> 1 Succisa pratensis  TRUE #> 2       Onodrim ent FALSE #> 3     Aster amellus  TRUE compadre_succisa <- cdb_check_species(Compadre, \"Succisa pratensis\",   return_db = TRUE ) compadre_succisa #> A COM(P)ADRE database ('CompadreDB') object with 1 SPECIES and 2 MATRICES. #>  #> # A tibble: 2 × 49 #>   mat        SpeciesAuthor   SpeciesAccepted CommonName Genus Family Order Class #>   <list>     <chr>           <chr>           <chr>      <chr> <fct>  <fct> <fct> #> 1 <CompdrMt> Succisa_praten… Succisa praten… NA         Succ… Capri… Dips… Magn… #> 2 <CompdrMt> Succisa_praten… Succisa praten… NA         Succ… Capri… Dips… Magn… #> # ℹ 41 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, #> #   MatrixCriteriaAge <fct>, MatrixPopulation <chr>, Lat <dbl>, Lon <dbl>, …"},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"accessing-the-matrices","dir":"Articles","previous_headings":"","what":"Accessing the matrices","title":"Getting started with Rcompadre","text":"Matrices CompadreDB objects stored special vector, called mat part data. However, matrices stored special objects within data frame addressed using Rcompadre accessor functions obtain , U, F C matrices (see User Guide), information stage definitions used. Thus, obtain matrix, includes types transition one use matA() function, return list matrices database (equivalent functions, matU(), matF() matC(): Thus one select particular matrices list using [[ ]] syntax often desirable know stages matrices. access information can use matrixClass() function. matrix accessor functions, function returns list can subsetted using square brackets.","code":"matA(compadre_succisa) #> [[1]] #>      A1    A2    A3    A4    A5    A6 #> A1 0.00 0.000 0.000 0.000 1.006 1.851 #> A2 0.55 0.492 0.150 0.000 0.000 0.000 #> A3 0.25 0.356 0.450 0.067 0.000 0.099 #> A4 0.00 0.137 0.321 0.568 0.358 0.197 #> A5 0.00 0.000 0.064 0.167 0.269 0.197 #> A6 0.00 0.000 0.000 0.184 0.358 0.493 #>  #> [[2]] #>           A1        A2      A3   A4         A5 #> A1 0.0600000 0.0000000 0.00000 0.00 3.91724308 #> A2 0.0020685 0.0000000 0.00000 0.00 0.13504696 #> A3 0.0000000 0.7333333 0.40625 0.12 0.01923077 #> A4 0.0000000 0.0000000 0.34375 0.70 0.53846154 #> A5 0.0000000 0.0000000 0.00000 0.14 0.36538462 x <- matA(compadre_succisa) x[[1]] #>      A1    A2    A3    A4    A5    A6 #> A1 0.00 0.000 0.000 0.000 1.006 1.851 #> A2 0.55 0.492 0.150 0.000 0.000 0.000 #> A3 0.25 0.356 0.450 0.067 0.000 0.099 #> A4 0.00 0.137 0.321 0.568 0.358 0.197 #> A5 0.00 0.000 0.064 0.167 0.269 0.197 #> A6 0.00 0.000 0.000 0.184 0.358 0.493 classInfo <- matrixClass(compadre_succisa) classInfo[[1]] #>   MatrixClassOrganized #> 1               active #> 2               active #> 3               active #> 4               active #> 5               active #> 6               active #>                                                    MatrixClassAuthor #> 1                                                           Seedling #> 2                                                           Juvenile #> 3                                                   Small vegetative #> 4 Large vegetative (not flowering but larger than small vegetatives) #> 5                                                    Small flowering #> 6                                                    Large flowering #>   MatrixClassNumber #> 1                 1 #> 2                 2 #> 3                 3 #> 4                 4 #> 5                 5 #> 6                 6 classInfo[[1]]$MatrixClassAuthor #> [1] \"Seedling\"                                                           #> [2] \"Juvenile\"                                                           #> [3] \"Small vegetative\"                                                   #> [4] \"Large vegetative (not flowering but larger than small vegetatives)\" #> [5] \"Small flowering\"                                                    #> [6] \"Large flowering\""},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"filteringsubsetting-the-database-based-on-metadata","dir":"Articles","previous_headings":"","what":"Filtering/subsetting the database based on metadata","title":"Getting started with Rcompadre","text":"often desirable subset data based sets criteria. normal data frame databases can subset using subset(). example, subset Eudicot species follows: subset arguments can complex needed. example, subset Eudicot species United States Canada matrix dimension >2 use following command: can compare compadre data sets using cdb_compare() command:","code":"x <- subset(Compadre, DicotMonoc == \"Eudicot\") x #> A COM(P)ADRE database ('CompadreDB') object with 80 SPECIES and 108 MATRICES. #>  #> # A tibble: 108 × 49 #>    mat        SpeciesAuthor  SpeciesAccepted CommonName Genus Family Order Class #>    <list>     <chr>          <chr>           <chr>      <chr> <fct>  <fct> <fct> #>  1 <CompdrMt> Lechea_cernua  Lechea cernua   NA         Lech… Cista… Malv… Magn… #>  2 <CompdrMt> Actinostemon_… Actinostemon c… NA         Acti… Eupho… Malp… Magn… #>  3 <CompdrMt> Gaura_neomexi… Gaura neomexic… NA         Gaura Onagr… Myrt… Magn… #>  4 <CompdrMt> Eriogonum_lon… Eriogonum long… Buckwheat  Erio… Polyg… Cary… Magn… #>  5 <CompdrMt> Succisa_prate… Succisa praten… NA         Succ… Capri… Dips… Magn… #>  6 <CompdrMt> Haplopappus_r… Pyrrocoma radi… NA         Pyrr… Compo… Aste… Magn… #>  7 <CompdrMt> Astragalus_tr… Astragalus tre… NA         Astr… Legum… Faba… Magn… #>  8 <CompdrMt> Plantago_coro… Plantago coron… NA         Plan… Plant… Lami… Magn… #>  9 <CompdrMt> Petrocoptis_p… Silene glaucif… NA         Sile… Caryo… Cary… Magn… #> 10 <CompdrMt> Astragalus_pe… Astragalus pec… NA         Astr… Legum… Faba… Magn… #> # ℹ 98 more rows #> # ℹ 41 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, … x <- subset(Compadre, DicotMonoc == \"Eudicot\" &   Country %in% c(\"USA\", \"CAN\") &   MatrixDimension > 2) cdb_compare(Compadre, x) #> Quick Summary... #>  #> cdb1 contains data for: #> 94 source papers #> 110 accepted species #> 150 matrices #>  #> cdb2 contains data for: #> 28 source papers #> 29 accepted species #> 41 matrices"},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"potential-issues-with-mpms","dir":"Articles","previous_headings":"Filtering/subsetting the database based on metadata","what":"Potential issues with MPMs","title":"Getting started with Rcompadre","text":"Numerous matrix calculations (Caswell 2001) particular requirements use. details beyond scope vignette, include things like (1) ergodicity, (2) primitivity, (3) singularity (4) irreducibility. addition, matrix calculations work missing values (.e. NA) MPM. can flag adding metadata using cdb_flag() function. use subset() like :","code":"Compadre_flagged <- cdb_flag(Compadre) x <- subset(Compadre_flagged, check_NA_A == FALSE & check_ergodic == TRUE)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"calculations-from-matrices","dir":"Articles","previous_headings":"Filtering/subsetting the database based on metadata","what":"Calculations from matrices","title":"Getting started with Rcompadre","text":"set matrices want make calculations , can use sapply() apply function across matrices list produced matA(). example, calculate lambda matrices can apply function eigs() popdemo package obtain lambda matrices x object produced . can examine summary, produce histogram etc.","code":"lambdaVals <- sapply(matA(x), popdemo::eigs, what = \"lambda\") summary(lambdaVals) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.2303  0.9331  1.0024  1.2482  1.1355  6.6145 hist(lambdaVals, main = \"Lambda values\")"},{"path":"https://github.com/jonesor/Rcompadre/articles/a01_GettingStarted.html","id":"references","dir":"Articles","previous_headings":"Filtering/subsetting the database based on metadata","what":"References","title":"Getting started with Rcompadre","text":"Caswell, H. (2001). Matrix Population Models: Construction, Analysis, Interpretation. 2nd edition. Sinauer Associates, Sunderland, MA. ISBN-10: 0878930965 Salguero-Gomez, R. , Jones, O. R., Archer, C. R., Buckley, Y. M., Che-Castaldo, J. , Caswell, H. , Hodgson, D. , Scheuerlein, . , Conde, D. ., Brinks, E. , Buhr, H. , Farack, C. , Gottschalk, F. , Hartmann, . , Henning, . , Hoppe, G. , Romer, G. , Runge, J. , Ruoff, T. , Wille, J. , Zeh, S. , Davison, R. , Vieregg, D. , Baudisch, . , Altwegg, R. , Colchero, F. , Dong, M. , Kroon, H. , Lebreton, J. , Metcalf, C. J., Neel, M. M., Parker, . M., Takada, T. , Valverde, T. , Velez-Espino, L. ., Wardle, G. M., Franco, M. Vaupel, J. W. (2015), COMPADRE Plant Matrix Database: open online repository plant demography. J Ecol, 103: 202-218. <:10.1111/1365-2745.12334> Salguero-Gomez, R. , Jones, O. R., Archer, C. R., Bein, C. , Buhr, H. , Farack, C. , Gottschalk, F. , Hartmann, . , Henning, . , Hoppe, G. , Romer, G. , Ruoff, T. , Sommer, V. , Wille, J. , Voigt, J. , Zeh, S. , Vieregg, D. , Buckley, Y. M., Che-Castaldo, J. , Hodgson, D. , Scheuerlein, . , Caswell, H. Vaupel, J. W. (2016), COMADRE: global data base animal demography. J Anim Ecol, 85: 371-384. <:10.1111/1365-2656.12482>","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Rcompadre with the tidyverse","text":"Rcompadre includes methods variety functions “Tidyverse”, popular group R packages geared toward data analysis, including dplyr (grammar data manipulation) ggplot2 (grammar graphics). vignette covers manipulation CompadreDB objects using dplyr, examples plotting CompadreDB objects using ggplot2. Users new packages may wish check introductory materials (e.g. dplyr vignette, Data Visualization chapter R Data Science).","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Using Rcompadre with the tidyverse","text":"’ll begin loading packages.","code":"library(Rcompadre) library(dplyr) library(ggplot2) library(popdemo)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"introduction-to-piping","dir":"Articles","previous_headings":"","what":"Introduction to piping","title":"Using Rcompadre with the tidyverse","text":"can take advantage piping. pipe (%>%) (magrittr package), passes object left first argument function right. also native pipe (R v. 4.1.0) magrittr pipe advantages placeholder element one want left hand side result go first argument right hand expression. Though generally don’t need , can explicitly refer object left using dot (\".\"). dot notation particularly helpful want pass object left argument first one. Using pipe single line isn’t helpful. real benefits come use pipes multi-line expressions carry sequence related operations.","code":"y <- c(0.2, 4.1, 3.7)  mean(y) # 'normal' expression y %>% mean() # piped expression y %>% mean() # dot is implicit y %>% mean(x = .) # dot is explicit x <- 1:3 y %>% data.frame(col1 = x, col2 = .) # use dot to pass object to second argument"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"piping-with-rcompadre","dir":"Articles","previous_headings":"Introduction to piping","what":"Piping with Rcompadre","title":"Using Rcompadre with the tidyverse","text":"Let’s say want remove rows matA contains missing values (NA). can use cdb_flag() add column checking NA (column “check_NA_A”), use filter() remove rows. two approaches without piping: ’s equivalent piped sequence: advantage piping don’t use nested functions (filter(cdb_flag())), don’t create object names every intermediate step analysis. additional alternative use subset() instead filter().","code":"# approach 1 (nested functions) compadre_use <- filter(cdb_flag(Compadre), check_NA_A == FALSE)  # approach 2 (intermediate step) compadre_flag <- cdb_flag(Compadre) compadre_use <- filter(compadre_flag, check_NA_A == FALSE) compadre_use <- Compadre %>%   cdb_flag() %>% # first argument is Compadre, from previous line   subset(check_NA_A == FALSE) # first argument is output of cdb_flag()"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"the-mutate-function","dir":"Articles","previous_headings":"","what":"The mutate function","title":"Using Rcompadre with the tidyverse","text":"mutate() function dplyr adds one new columns data frame (case, CompadreDB object). Often new column based transformation one existing columns. Let’s say want conduct analysis comparing Nordic countries rest Europe. can use filter() limit database Europe, use mutate() create new column identifying rows Nordic countries.","code":"compadre_euro <- Compadre %>%   filter(Continent == \"Europe\") %>%   mutate(Nordic = Country %in% c(\"NOR\", \"SWE\", \"DNK\", \"ISL\", \"FIN\"))"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"using-mutate-with-rcompadre-functions-that-return-vectors","dir":"Articles","previous_headings":"The mutate function","what":"Using mutate with Rcompadre functions that return vectors","title":"Using Rcompadre with the tidyverse","text":"variety Rcompadre functions take CompadreDB object first argument return vector. use functions within mutate() piped sequence, generally need explicitly refer object left side pipe dot (\".\"). ’s example Rcompadre functions mpm_has_active() cdb_id_studies(), take CompadreDB object return vector. example , pipe passes CompadreDB object first arguments mutate() subset(), respectively. dot first argument implicit. , within mutate(), use dot (explicitly time) pass CompadreDB object mpm_has_active() cdb_id_studies(). can also use dot notation approach extract components CompadreMat objects column mat, matA, matU, matF, matC, matrixClass, MatrixClassOrganized, MatrixClassAuthor. components can accessed using accessor function name. ’s extract list matU list MatrixClassOrganized row database, add lists CompadreDB object new columns:","code":"compadre_use <- Compadre %>%   mutate(has_active = mpm_has_active(.)) %>%   filter(has_active == TRUE) %>%   mutate(StudyID = cdb_id_studies(.)) compadre_unnest <- Compadre %>%   mutate(     mat_U = matU(.),     m_class_organized = MatrixClassOrganized(.)   )"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"vectorizing-within-mutate-with-the-apply-functions","dir":"Articles","previous_headings":"The mutate function","what":"Vectorizing within mutate with the apply functions","title":"Using Rcompadre with the tidyverse","text":"Just like creating new column $ (e.g. compadre$new_col <- ...), expression within mutate() must return vector length number rows data frame, return single value recycled rows. operations requires vectorization. Let’s say want calculate population growth rate every matrix database. can use eigs() function popdemo package, can take single matrix time. apply eigs() list matrices can use sapply(). first need remove matrices missing values, cause eigs() fail. example , sapply() returns scalar value every row database. instead want derive complex object every row vector matrix, can use function lapply() always returns list. example use lapply() calculate vectors stage-specific survival (column sums matU) every row database.","code":"compadre_lambda <- Compadre %>%   cdb_flag() %>%   filter(check_NA_A == FALSE) %>% # remove matrices with missing values   mutate(mat_A = matA(.)) %>% # extract list-column of matA   mutate(lam = sapply(mat_A, popdemo::eigs, what = \"lambda\")) #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `lam = sapply(mat_A, popdemo::eigs, what = \"lambda\")`. #> Caused by warning in `FUN()`: #> ! More than one eigenvalues have equal absolute magnitude compadre_stage_surv <- Compadre %>%   mutate(stage_survival = lapply(matU(.), colSums))  # print vector of stage-specific survival for 20th row compadre_stage_surv$stage_survival[[20]] #>    U1    U2    U3    U4    U5    U6  #> 0.145 0.888 0.788 0.928 0.907 0.999"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"vectorizing-over-multiple-arguments","dir":"Articles","previous_headings":"The mutate function","what":"Vectorizing over multiple arguments","title":"Using Rcompadre with the tidyverse","text":"Let’s say want know survival probability first ‘active’ stage class (.e. stage ’s dormant propagule) every row database. One approach write function takes matU integer index first active stage class, returns corresponding survival probability, e.g. Notice function two arguments, vary across rows database. therefore need vectorize function arguments, can mapply() (.e. “multivariate apply”). ’s example:","code":"SurvFirstActive <- function(matU, first_active) colSums(matU)[first_active] compadre_surv_first_active <- Compadre %>%   mutate(     surv_1 = mapply(       FUN = SurvFirstActive, # function       matU = matU(.), # argument 1       first_active = mpm_first_active(.)     ) # argument 2   )"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"the-group_by-and-summarize-functions","dir":"Articles","previous_headings":"","what":"The group_by and summarize functions","title":"Using Rcompadre with the tidyverse","text":"group_by() summarize() functions used split-apply-combine operations, want apply function separately different groups within data, recombine results. ’s example. ’ll use group_by() group database unique values species (column SpeciesAccepted), use summarize() count number unique populations (column MatrixPopulation) group. Notice output regular tibble (.e. longer CompadreDB object) one row unique ‘group’ (.e. species). , instead summary table one row per species, rather append number populations per species new column CompadreDB object, can follow group_by() mutate() instead summarize(). ’s example: Make sure use ungroup() ’re finished groups, prevent unexpected behaviour later .","code":"# count number of unique populations by species Compadre %>%   group_by(SpeciesAccepted) %>%   summarize(n_populations = length(unique(MatrixPopulation))) %>%   arrange(desc(n_populations)) # arrange in descending order of n_pops #> # A tibble: 110 × 2 #>    SpeciesAccepted        n_populations #>    <chr>                          <int> #>  1 Aster amellus                      3 #>  2 Echinacea angustifolia             3 #>  3 Lepidium davisii                   3 #>  4 Pyrrocoma radiata                  3 #>  5 Androsace elongata                 2 #>  6 Armeria caespitosa                 2 #>  7 Asarum canadense                   2 #>  8 Astragalus peckii                  2 #>  9 Astragalus scaphoides              2 #> 10 Calochortus lyallii                2 #> # ℹ 100 more rows # subset to species with 10+ unique populations compadre_replicated_pops <- Compadre %>%   group_by(SpeciesAccepted) %>%   mutate(n_pops = length(unique(MatrixPopulation))) %>%   ungroup() %>%   subset(n_pops >= 10)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"obtaining-a-single-representative-of-each-species","dir":"Articles","previous_headings":"","what":"Obtaining a single representative of each species","title":"Using Rcompadre with the tidyverse","text":"common task comparative analyses obtain single representative species. One way users can using group_by(), followed slice() sample() randomly select representative accepted species.","code":"singleRepresentativeSpecies <- Compadre %>%   group_by(SpeciesAccepted) %>%   slice(sample(1))"},{"path":"https://github.com/jonesor/Rcompadre/articles/a02_RcompadreTidy.html","id":"using-compadredb-objects-with-ggplot","dir":"Articles","previous_headings":"","what":"Using CompadreDB objects with ggplot","title":"Using Rcompadre with the tidyverse","text":"Rcompadre includes methods allow CompadreDB objects used data arguments within ggplot(), just like old data frame. example plots. Plot study coordinates world map:  Boxplots life expectancy first non-propagule stage, arranged OrganismType, based ‘grand mean matrices’ studies wild, unmanipulated populations: one rather advanced, combining topics vignette. don’t worry can’t immediately understand every line.","code":"ggplot2::ggplot(Compadre, aes(Lon, Lat)) +   borders(database = \"world\", fill = \"grey80\", col = NA) +   geom_point(col = \"steelblue\", size = 1.8, alpha = 0.8) # function to calculate life expectancy lifeExpectancy <- function(matU, startLife) {   N <- solve(diag(nrow(matU)) - matU)   return(colSums(N)[startLife]) }  compadre_life_expect <- Compadre %>%   filter(     MatrixComposite != \"Seasonal\", # filter is the dplyr version of subset     MatrixTreatment == \"Unmanipulated\",     MatrixCaptivity == \"W\",     ProjectionInterval == \"1\"   ) %>%   mutate(StageID = cdb_id_stages(.)) %>%   cdb_collapse(columns = \"StageID\") %>%   cdb_flag() %>%   filter(     check_NA_U == FALSE,     check_zero_U == FALSE,     check_singular_U == FALSE   ) %>%   mutate(matU = matU(.), start_life = mpm_first_active(.)) %>%   mutate(life_expectancy = mapply(lifeExpectancy, matU, start_life)) %>%   filter(life_expectancy >= 1) %>%   mutate(OrganismType = reorder(OrganismType, life_expectancy, median))  ggplot2::ggplot(compadre_life_expect, aes(OrganismType, life_expectancy)) +   geom_boxplot() +   scale_y_log10() +   coord_flip() +   labs(x = NULL, y = \"Life expectancy (years)\")"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Vectorising with Rcompadre","text":"COM(P)ADRE databases contain thousands matrix population models. want derive traits large set matrices, ’ll need use either loops vectorisation. Vectorising means applying function element vector. vector defined broadly - sequence character strings, column data.frame, list matrices, etc. Vectorised code generally runs faster loops, many R users find vectorised code easier write understand.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Vectorising with Rcompadre","text":"’ll start loading packages dataset ’ll using throughout vignette. dataset Compadre subset recent COMPADRE release ’s built Rcompadre.","code":"library(Rcompadre) library(popdemo) #> Welcome to popdemo! This is version 1.3-0 #> Use ?popdemo for an intro, or browseVignettes('popdemo') for vignettes #> Citation for popdemo is here: doi.org/10.1111/j.2041-210X.2012.00222.x #> Development and legacy versions are here: github.com/iainmstott/popdemo data(Compadre)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"introduction-to-vectorisation","dir":"Articles","previous_headings":"","what":"Introduction to vectorisation","title":"Vectorising with Rcompadre","text":"understand vectorisation, first need vector. purpose, ’ll extract list matrices mat column Compadre, add list matrices Compadre new column. new column, Compadre$matA, vector list. Let’s say want calculate dimension every matrix Compadre$matA. fact, Compadre already data column ‘MatrixDimension’, let’s say want double-check . ’ll use function nrow(), assume number rows columns equal. can’t use nrow() directly Compadre$matA, function nrow() isn’t vectorised. can take one object time.","code":"Compadre$matA <- matA(Compadre) is.vector(Compadre$matA) # it really is a vector #> [1] TRUE is.list(Compadre$matA) # and also a list #> [1] TRUE length(Compadre$matA) # with 150 matrices #> [1] 150 Compadre$matA[1:3] # here are the first three #> [[1]] #>      A1   A2   A3   A4 #> A1 0.61 0.38 0.30 1.16 #> A2 0.23 0.50 0.31 0.32 #> A3 0.00 0.18 0.54 0.41 #> A4 0.00 0.05 0.08 0.50 #>  #> [[2]] #>        A1    A2    A3       A4       A5        A6 #> A1 0.8430 0.000 0.000 176.0600 635.7200 1601.2500 #> A2 0.0003 0.000 0.000   0.0584   0.2109    0.5313 #> A3 0.0000 0.476 0.132   0.1430   0.0000    0.0560 #> A4 0.0000 0.095 0.105   0.2860   0.0000    0.0000 #> A5 0.0000 0.167 0.474   0.4290   0.8000    0.0000 #> A6 0.0000 0.143 0.237   0.0710   0.2000    0.8890 #>  #> [[3]] #>       A1    A2    A3 #> A1 0.017 0.000 1.142 #> A2 0.655 0.902 0.009 #> A3 0.000 0.001 0.988"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"manual-approach","dir":"Articles","previous_headings":"Introduction to vectorisation","what":"Manual approach","title":"Vectorising with Rcompadre","text":"something like … ’s efficient 150 matrices.","code":"Compadre$dim <- numeric(nrow(Compadre)) # create empty vector to store output Compadre$dim[1] <- nrow(Compadre$matA[[1]]) # nrow matrix 1 Compadre$dim[2] <- nrow(Compadre$matA[[2]]) # nrow matrix 2 Compadre$dim[3] <- nrow(Compadre$matA[[3]]) # nrow matrix 3 # ... all the way to 150"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"loop-approach","dir":"Articles","previous_headings":"Introduction to vectorisation","what":"Loop approach","title":"Vectorising with Rcompadre","text":"loop much efficient .","code":"# create empty vector to store output Compadre$dim <- numeric(nrow(Compadre))  # loop through all rows of Compadre for (i in seq_len(nrow(Compadre))) {   Compadre$dim[i] <- nrow(Compadre$matA[[i]]) }"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"vectorised-approach","dir":"Articles","previous_headings":"Introduction to vectorisation","what":"Vectorised approach","title":"Vectorising with Rcompadre","text":"even nicer approach vectorise function nrow() vector Compadre$matA using sapply(). sapply() applies function specified 2nd argument (nrow()) every element vector first argument (Compadre$matA), returns vector results. advantage sapply() loop don’t need pre-define object store results.","code":"Compadre$dim <- sapply(Compadre$matA, nrow)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"vectorising-custom-functions","dir":"Articles","previous_headings":"Introduction to vectorisation","what":"Vectorising custom functions","title":"Vectorising with Rcompadre","text":"can also vectorise custom function. Let’s say want know, every matrix, whether stages transitions (.e. column sums equal zero). ’s vectorised approach. key vectorising make sure function works individual elements vector.","code":"# function to determine whether matrix 'mat' has any stages with no transitions NullStages <- function(mat) any(colSums(mat) == 0)  # apply function to every element of A Compadre$null_stages <- sapply(Compadre$matA, NullStages) NullStages(Compadre$matA[[1]]) # apply function to single element"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"accessor-functions-and-vectorisation","dir":"Articles","previous_headings":"","what":"Accessor functions and vectorisation","title":"Vectorising with Rcompadre","text":"Note , example , wasn’t necessary create column Compadre$matA vectorising matrices. simply used matA() accessor within sapply().","code":"Compadre$null_stages <- sapply(matA(Compadre), NullStages)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"using-cdb_unnest-to-avoid-accessors","dir":"Articles","previous_headings":"Accessor functions and vectorisation","what":"Using cdb_unnest() to avoid accessors","title":"Vectorising with Rcompadre","text":"said, using accessor funtions can get tedious. Rather constantly using accessor functions extract components mat column, use function cdb_unnest() extract separate columns matrix components start analysis. can refer component using $, e.g.","code":"# create new columns matA, matU, matF, matC, MatrixClassAuthor, etc.. CompUnnest <- cdb_unnest(Compadre) # apply NullStages to every matA CompUnnest$null_stages <- sapply(CompUnnest$matA, NullStages)  # count number of dormant stages in every MatrixClassOrganized NumberDormant <- function(stages) length(which(stages == \"dorm\")) CompUnnest$n_dormant <- sapply(CompUnnest$MatrixClassOrganized, NumberDormant)"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"other-apply-functions","dir":"Articles","previous_headings":"","what":"Other apply functions","title":"Vectorising with Rcompadre","text":"vapply() similar sapply(), except output type specified argument. lapply() always returns list, ’s useful output complex single value input. example, use lapply calculate vectors stage-specific survival (column sums matU). mapply() vectorising multiple arguments. example, lifeExpectancy() function (taken package Rage) calculates life expectancy given two arguments: U matrix, integer indicator stage class reflecting ‘start life’. start life often defined first ‘active’ stage class (.e. propagule dormant), index vary row row.","code":"sapply(CompUnnest$matA[1:6], nrow) #> [1] 4 6 3 5 5 3 vapply(CompUnnest$matA[1:6], nrow, numeric(1)) # must specify output type #> [1] 4 6 3 5 5 3 lapply(CompUnnest$matU[1:4], function(m) colSums(m)) #> [[1]] #>   U1   U2   U3   U4  #> 0.84 0.73 0.93 0.91  #>  #> [[2]] #>     U1     U2     U3     U4     U5     U6  #> 0.8433 0.8810 0.9480 0.9290 1.0000 0.9450  #>  #> [[3]] #>    U1    U2    U3  #> 0.672 0.903 0.997  #>  #> [[4]] #>      U1      U2      U3      U4      U5  #> 0.83820 0.82850 0.75345 0.86665 0.05000 # function to calculate life expectancy lifeExpectancy <- function(matU, startLife) {   N <- solve(diag(nrow(matU)) - matU)   return(colSums(N)[startLife]) }  # get index of first active stage class with mpm_first_active() CompUnnest$start_life <- mpm_first_active(CompUnnest)  # vectorise lifeExpectancy over matU and start_life mapply(   lifeExpectancy, # function   CompUnnest$matU[1:6], # first argument to vectorise over   CompUnnest$start_life[1:6] ) # second argument to vectorise over #>        U1        U2        U1        U1        U1        U1  #>  5.727060 22.194872  8.439966  3.009829 10.877215 18.181818"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"when-functions-fail","dir":"Articles","previous_headings":"","what":"When functions fail","title":"Vectorising with Rcompadre","text":"Just like loops, vectorisation fails function vectorised throws error element vector. ’s example. eigs() function popdemo calculates expected population growth rate given projection matrix. ’ll work matrices Compadre, fails matrices contain missing values (NA). two basic approaches overcoming :","code":"# works for a single matrix popdemo::eigs(CompUnnest$matA[[1]], what = \"lambda\") #> [1] 1.058029  # but fails when applied to all matrices because a few have missing values CompUnnest$lambda <- sapply(CompUnnest$matA, popdemo::eigs, what = \"lambda\") #> Error in eigen(A): infinite or missing values in 'x'"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"remove-or-skip-problem-elements","dir":"Articles","previous_headings":"When functions fail","what":"1. Remove or skip problem elements","title":"Vectorising with Rcompadre","text":"eigs() doesn’t work matrices missing values, one approach simply remove matrices missing values. cdb_flag() function easy way check missing values, common issues might hinder analyses. Alternatively, want avoid subsetting, pre-define placeholder column result, selectively apply eigs() function matrices don’t contain missing values. Rows missing values matA retain original placeholder value NA.","code":"# add column 'check_NA_A', indicating whether matA contains missing values (T/F) CompFlag <- cdb_flag(CompUnnest, checks = \"check_NA_A\")  # remove rows where matA contains missing values CompSub <- subset(CompFlag, check_NA_A == FALSE)  # apply lambda() to every remaining matA CompSub$lambda <- sapply(matA(CompSub), popdemo::eigs, what = \"lambda\") #> Warning in FUN(X[[i]], ...): More than one eigenvalues have equal absolute #> magnitude # identify rows with no missing values in matA no_missing <- which(CompFlag$check_NA_A == FALSE)  # create placeholder column for lambda CompFlag$lambda <- NA  # apply eigs() to all matA with no missing values CompFlag$lambda[no_missing] <- sapply(CompFlag$matA[no_missing],   popdemo::eigs,   what = \"lambda\" ) #> Warning in FUN(X[[i]], ...): More than one eigenvalues have equal absolute #> magnitude"},{"path":"https://github.com/jonesor/Rcompadre/articles/a03_VectorisingRcompadre.html","id":"modify-the-function","dir":"Articles","previous_headings":"When functions fail","what":"2. Modify the function","title":"Vectorising with Rcompadre","text":"second approach modify function want vectorise can natively handle special cases. example, might modify eigs() returns NA matrix contains missing values. special cases harder test , use R’s condition-handling functions like try() tryCatch(). ’s example. latter approach requires caution, ’ll get NA error. errors might reflect problems data code fixable, case NA may misleading.","code":"lambdaFn1 <- function(mat) {   # check mat for missing values: if TRUE return NA, else return eigs(mat)   ifelse(anyNA(mat), NA, popdemo::eigs(mat, what = \"lambda\")) }  CompUnnest$lambda <- sapply(CompUnnest$matA, lambdaFn1) #> Warning in popdemo::eigs(mat, what = \"lambda\"): More than one eigenvalues have #> equal absolute magnitude lambdaFn2 <- function(mat) {   # try eigs(mat): if error return NA   tryCatch(eigs(mat, what = \"lambda\"), error = function(err) NA) }  CompUnnest$lambda <- sapply(CompUnnest$matA, lambdaFn2) #> Warning in eigs(mat, what = \"lambda\"): More than one eigenvalues have equal #> absolute magnitude"},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"the-compadredb-object","dir":"Articles","previous_headings":"","what":"The CompadreDB object","title":"Using your own matrix data","text":"illustrating construction CompadreDB object using cdb_build_cdb() first necessary outline anatomy object. CompadreDB object consists four parts: (1) matrices; (2) stage information; (3) metadata describing matrices; (4) version information. Much information can generated automatically cdb_build_cdb() function.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"the-matrices","dir":"Articles","previous_headings":"The CompadreDB object","what":"The matrices","title":"Using your own matrix data","text":"MPM data can exist matrices (.e. whole MPM model) can also exist series submatrices sum matrix. Typically matrices based demographic processes growth survival, sexual reproduction clonal reproduction. matrices commonly denoted U, F C matrices respectively, = U + F + C (Caswell 2001, Salguero-Gomez et al. 2015, 2016). Thus, MPM CompadreDB object provided list object four elements representing set matrices: , full MPM three demographic process-based submatrices (U, F C). cases desirable (perhaps impossible) provide information set submatrices. example, may possible distinguish sexual (F) clonal (C) reproduction, growth/survival (U) reproduction (F /C). Alternatively, may simply planned analyses require potentially laborious splitting matrix submatrices. Nevertheless, CompadreDB requires full set four matrices. Thankfully, matrices can provided NA matrices can often generated automatically provided data (see ). matrices provided, cdb_build_cdb() automatically populate U, F c matrices NA values. U matrix provided, F /C matrix must also provided. one F C matrices provided, assumed 0. matrix calculated automatically sets = U + F + C. Sets matrices type must provided list type. example, provide two lists: one U matrices one matching F matrices. function conducts error checks ensure lists length, matrices set dimensions.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"the-stage-information","dir":"Articles","previous_headings":"The CompadreDB object","what":"The stage information","title":"Using your own matrix data","text":"MPM life-cycle divided two discrete stages. CompadreDB object must include information, provided list data.frames (one MPM).","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"the-metadata","dir":"Articles","previous_headings":"The CompadreDB object","what":"The metadata","title":"Using your own matrix data","text":"valid CompadreDB object MUST include data.frame metadata number rows equal number MPMs. metadata, can minimal extensive, depending users’ needs. simplest case, example simulated data, might simply ID number, perhaps parameters used simulation. cases empirical MPMs metadata typically include taxonomic information species, geographic location, name study site, year time-frame study . Thus, metadata data.frame can include anything one hundreds columns.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"version-information","dir":"Articles","previous_headings":"The CompadreDB object","what":"Version information","title":"Using your own matrix data","text":"Finally, version information must included. can simply name, date intended help keep track multiple version data.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Using your own matrix data","text":"main function used creating CompadreDB object user-defined data cdb_build_cdb(). function takes components described , performs error checks, combines single CompadreDB object.","code":""},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A simple example","title":"Using your own matrix data","text":"First need load library, dplyr package. example generate series 2 dimension matrices using series uniform distributions U submatrix, gamma distribution, approximate average Poisson process. case, matrices dimension, necessary dimension . bit long-winded, certainly better ways simulate data (e.g. using Dirichlet distribution), example serves useful purpose . Next use cdb_build_cdb() convert list matrices COMPADRE object. adding identifier matrix, column shape parameter Gamma distribution used simulate data. can look matrices using normal Rcompadre function matA(). Now matrices stored CompadreDB object can manipulated diverse ways CompadreDB object downloaded COMPADRE/COMADRE database. example, filtering based part metadata, case, shapeParam.","code":"library(Rcompadre) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union nMat <- 20 mort1 <- runif(nMat, 0, 1) u1 <- runif(nMat, 0, 1 - mort1) u2 <- 1 - mort1 - u1 mort2 <- runif(nMat, 0, 1) u3 <- runif(nMat, 0, 1 - mort2) u4 <- 1 - mort2 - u3  Uvals <- cbind(u1, u2, u3, u4) Fvals <- rgamma(nMat, rep(1:4, each = 5)) Avals <- Uvals Avals[, 3] <- Avals[, 3] + Fvals  Alist <- lapply(as.list(as.data.frame(t(Avals))), matrix,   byrow = FALSE,   nrow = 2, ncol = 2 ) meta <- data.frame(idNum = 1:20, shapeParam = rep(1:4, each = 5))  x <- cdb_build_cdb(mat_a = Alist, metadata = meta) #> Warning in cdb_build_cdb(mat_a = Alist, metadata = meta): Metadata does not include a `SpeciesAccepted` column, so number #>               of species not provided when viewing object. x #> A COM(P)ADRE database ('CompadreDB') object with ?? SPECIES and 20 MATRICES. #>  #> # A tibble: 20 × 3 #>    mat        idNum shapeParam #>    <list>     <int>      <int> #>  1 <CompdrMt>     1          1 #>  2 <CompdrMt>     2          1 #>  3 <CompdrMt>     3          1 #>  4 <CompdrMt>     4          1 #>  5 <CompdrMt>     5          1 #>  6 <CompdrMt>     6          2 #>  7 <CompdrMt>     7          2 #>  8 <CompdrMt>     8          2 #>  9 <CompdrMt>     9          2 #> 10 <CompdrMt>    10          2 #> 11 <CompdrMt>    11          3 #> 12 <CompdrMt>    12          3 #> 13 <CompdrMt>    13          3 #> 14 <CompdrMt>    14          3 #> 15 <CompdrMt>    15          3 #> 16 <CompdrMt>    16          4 #> 17 <CompdrMt>    17          4 #> 18 <CompdrMt>    18          4 #> 19 <CompdrMt>    19          4 #> 20 <CompdrMt>    20          4 matA(x)[1] #> [[1]] #>           [,1]       [,2] #> [1,] 0.2664835 0.81467771 #> [2,] 0.6527664 0.05590771 x %>%   filter(shapeParam > 2) #> A COM(P)ADRE database ('CompadreDB') object with ?? SPECIES and 10 MATRICES. #>  #> # A tibble: 10 × 3 #>    mat        idNum shapeParam #>    <list>     <int>      <int> #>  1 <CompdrMt>    11          3 #>  2 <CompdrMt>    12          3 #>  3 <CompdrMt>    13          3 #>  4 <CompdrMt>    14          3 #>  5 <CompdrMt>    15          3 #>  6 <CompdrMt>    16          4 #>  7 <CompdrMt>    17          4 #>  8 <CompdrMt>    18          4 #>  9 <CompdrMt>    19          4 #> 10 <CompdrMt>    20          4"},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"including-stage-descriptions-and-version-information","dir":"Articles","previous_headings":"","what":"Including stage descriptions and version information","title":"Using your own matrix data","text":"example, include information stage definitions. Since information provided, cdb_build_cdb() automatically creates information. can view information like (using square brackets choose particular matrix model): following example illustrate one can include descriptions stages First create data frame describing matrix stages. case, stages can simply repeat stageDescriptor list. However, size data frames, information within may vary. Now can access stage/class description information like , using square brackets find information particular matrices. can also obtain version information. newly-created database can saved like :","code":"matrixClass(x)[1] #> [[1]] #>   MatrixClassOrganized MatrixClassAuthor MatrixClassNumber #> 1               active                 1                 1 #> 2               active                 2                 2 (stageDescriptor <- data.frame(   MatrixClassOrganized = rep(\"active\", 2),   MatrixClassAuthor = c(\"small\", \"large\"),   stringsAsFactors = FALSE )) #>   MatrixClassOrganized MatrixClassAuthor #> 1               active             small #> 2               active             large stageDesc <- list() stageDesc[1:20] <- list(stageDescriptor) y <- cdb_build_cdb(   mat_a = Alist, metadata = meta, stages = stageDesc,   version = \"Matrices Rock!\" ) #> Warning in cdb_build_cdb(mat_a = Alist, metadata = meta, stages = stageDesc, : Metadata does not include a `SpeciesAccepted` column, so number #>               of species not provided when viewing object. matrixClass(y)[5] #> [[1]] #>   MatrixClassOrganized MatrixClassAuthor MatrixClassNumber #> 1               active             small                 1 #> 2               active             large                 2 MatrixClassAuthor(y)[5] #> [[1]] #> [1] \"small\" \"large\" Version(y) #> [1] \"Matrices Rock!\" DateCreated(y) #> [1] \"2024-10-16\" save(y, \"myMatrixDatabase.Rdata\")"},{"path":"https://github.com/jonesor/Rcompadre/articles/a05_UsingYourOwnData.html","id":"references","dir":"Articles","previous_headings":"Including stage descriptions and version information","what":"References","title":"Using your own matrix data","text":"Caswell, H. (2001). Matrix Population Models: Construction, Analysis, Interpretation. 2nd edition. Sinauer Associates, Sunderland, MA. ISBN-10: 0878930965 Salguero-Gomez, R. , Jones, O. R., Archer, C. R., Buckley, Y. M., Che-Castaldo, J. , Caswell, H. , Hodgson, D. , Scheuerlein, . , Conde, D. ., Brinks, E. , Buhr, H. , Farack, C. , Gottschalk, F. , Hartmann, . , Henning, . , Hoppe, G. , Romer, G. , Runge, J. , Ruoff, T. , Wille, J. , Zeh, S. , Davison, R. , Vieregg, D. , Baudisch, . , Altwegg, R. , Colchero, F. , Dong, M. , Kroon, H. , Lebreton, J. , Metcalf, C. J., Neel, M. M., Parker, . M., Takada, T. , Valverde, T. , Velez-Espino, L. ., Wardle, G. M., Franco, M. Vaupel, J. W. (2015), COMPADRE Plant Matrix Database: open online repository plant demography. J Ecol, 103: 202-218. <:10.1111/1365-2745.12334> Salguero-Gomez, R. , Jones, O. R., Archer, C. R., Bein, C. , Buhr, H. , Farack, C. , Gottschalk, F. , Hartmann, . , Henning, . , Hoppe, G. , Romer, G. , Ruoff, T. , Sommer, V. , Wille, J. , Voigt, J. , Zeh, S. , Vieregg, D. , Buckley, Y. M., Che-Castaldo, J. , Hodgson, D. , Scheuerlein, . , Caswell, H. Vaupel, J. W. (2016), COMADRE: global data base animal demography. J Anim Ecol, 85: 371-384. <:10.1111/1365-2656.12482>","code":""},{"path":"https://github.com/jonesor/Rcompadre/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Barks. Author. Danny Buss. Author. Roberto Salguero-Gomez. Author. Iain Stott. Author. William K. Petry. Author. Tamora James. Author. Owen Jones. Author, maintainer. Julia Jones. Author. Gesa Römer. Author. Sam Levin. Author.","code":""},{"path":"https://github.com/jonesor/Rcompadre/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jones, et al. (2022). Rcompadre Rage - two R packages facilitate use COMPADRE COMADRE databases calculation life history traits matrix population models. Methods Ecology Evolution 13: 770-781. URL https://doi.org/10.1111/2041-210X.13792","code":"@Article{,   title = {Rcompadre and Rage - two {R} packages to facilitate the use of               the {COMPADRE} and {COMADRE} databases and calculation of life               history traits from matrix population models},   author = {Owen R. Jones and Patrick Barks and Iain M. Stott and Tamora D. James and Sam C. Levin and William K. Petry and Pol Capdevila and Judy Che-Castaldo and John Jackson and Gesa Römer and Caroline Schuette and Chelsea C Thomas and Roberto Salguero-Gómez},   journal = {Methods in Ecology and Evolution},   year = {2022},   pages = {770-781},   volume = {13},   doi = {10.1111/2041-210X.13792}, }"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"rcompadre-","dir":"","previous_headings":"","what":"Utilities for using the COM(P)ADRE Matrix Model Database","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"R package facilitate working COM(P)ADRE Plant Animal Matrix Population Databases.","code":""},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"Install stable release package CRAN : Install package GitHub : install development branch use:","code":"install.packages(\"Rcompadre\") # install package 'remotes' if necessary # will already be installed if 'devtools' is installed install.packages(\"remotes\")  # argument 'build_opts = NULL' only needed if you want to build vignettes remotes::install_github(\"jonesor/Rcompadre\", build_opts = NULL) remotes::install_github(\"jonesor/Rcompadre\", ref = \"devel\")"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"","code":"library(Rcompadre)"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"fetching-a-database","dir":"","previous_headings":"Usage","what":"Fetching a database","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"Fetch recent database version compadre-db.org load local .RData file prefer using load() load local copy legacy database, use as_cdb() convert CompadreDB class","code":"compadre <- cdb_fetch(\"compadre\") # or use 'comadre' for the animal database compadre <- cdb_fetch(\"path/to/file/COMPADRE_v.4.0.1.RData\") load(\"COMPADRE_v.4.0.1.RData\") # loads object 'compadre' compadre <- as_cdb(compadre)"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"subsetting","dir":"","previous_headings":"Usage","what":"Subsetting","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"part CompadreDB objects work like data frame. can subset using [, subset() filter()","code":"# subset to the first 10 rows compadre[1:10, ]  # subset to the species 'Echinacea angustifolia' subset(compadre, SpeciesAccepted == \"Echinacea angustifolia\")  # subset to the species 'Echinacea angustifolia' filter(compadre, SpeciesAccepted == \"Echinacea angustifolia\")"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"example-analysis-calculating-population-growth-rates","dir":"","previous_headings":"Usage","what":"Example analysis: calculating population growth rates","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"First ’ll use function cdb_flag() add columns database flagging potential issues projection matrices, missing values, matrices don’t meet assumptions like ergodicity, irreducibility, primitivity. ’ll able calculate population growth rates matrices don’t contain missing values, want use matrices meet assumption ergodicity, ’ll subset database accordingly. Finally, ’ll use eigs() function popdemo package calculate population growth rate every matrix compadre_sub. code , accessor function matA() used extract list projection matrices (full matrix, matA) every row compadre_sub. also accessor functions matrix subcomponents (matU(), matF(), matC()), many parts database .","code":"compadre_flags <- cdb_flag(compadre) compadre_sub <- subset(   compadre_flags,   check_NA_A == FALSE & check_ergodic == TRUE ) compadre_sub$lambda <- sapply(matA(compadre_sub), popdemo::eigs, what = \"lambda\")"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"previous-releases","dir":"","previous_headings":"","what":"Previous releases","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"Specific earlier releases package can installed using appropriate @ tag. example install version 0.1.0: See Changelog details.","code":"remotes::install_github(\"jonesor/Rcompadre@v0.1.0\")"},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"Jones, Owen R., Patrick Barks, Iain M. Stott, Tamora D. James, Sam C. Levin, William K. Petry, Pol Capdevila, et al. 2022. “Rcompadre Rage – Two R Packages Facilitate Use COMPADRE COMADRE Databases Calculation Life History Traits Matrix Population Models.” Methods Ecology Evolution. doi: 10.1111/2041-210X.13792.","code":""},{"path":"https://github.com/jonesor/Rcompadre/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Utilities for using the COM(P)ADRE Matrix Model Database","text":"contributions welcome. Please note project released Contributor Code Conduct. participating project agree abide terms. numerous ways contributing. can submit bug reports, suggestions etc. opening issue. can copy fork repository, make code edits send us pull request. ’s . can get know us join collaborator main repository. also welcome email us.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/Compadre.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsamples of the COMPADRE Plant Matrix Database and COMADRE Animal Matrix Database for testing and examples — Compadre","title":"Subsamples of the COMPADRE Plant Matrix Database and COMADRE Animal Matrix Database for testing and examples — Compadre","text":"Compadre (plant matrices) Comadre (animal matrices) subsamples COMPADRE Plant Matrix Database COMADRE Animal Matrix Database, respectively, used testing examples. object class 'CompadreDB' therefore following two slots: data version. full documentation see COMPADRE User Guide.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/Compadre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsamples of the COMPADRE Plant Matrix Database and COMADRE Animal Matrix Database for testing and examples — Compadre","text":"","code":"Compadre  Comadre"},{"path":"https://github.com/jonesor/Rcompadre/reference/Compadre.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subsamples of the COMPADRE Plant Matrix Database and COMADRE Animal Matrix Database for testing and examples — Compadre","text":"Slot data - tibble-style data frame following 48 columns: mat - list 'CompadreMat' objects, following slots: matA - matrix population model matU - survival- growth-related component matA matF - sexual reproduction component matA matC - clonal reproduction component matA matrixClass - data frame following columns: MatrixClassOrganized - Standardized stage class matrix population model MatrixClassAuthor - Stage description original publication MatrixClassNumber - Integer stage number SpeciesAuthor - Binomial species name given paper's author SpeciesAccepted - Accepted binomial species name taken Plant List Catalogue Life CommonName - Common name species used publication Genus - Taxonomic genus accepted species belongs Family - Family species belongs Order - Order species belongs Class - Class species belongs Phylum - Phylum species belongs Kingdom - Kingdom species belongs OrganismType - Organism type (see COMPADRE User Guide documentation) DicotMonoc - Whether species dicot monocot. Non-angiosperms NA. AngioGymno - Whether species angiosperm gymnosperm. Non-plants NA. Authors - Last name authors (separated \";\") Journal - Abbreviated journal title, type source document (e.g. \"PhD thesis\") YearPublication - Year publication DOI.ISBN - Digital Object Identifier International Standard Book Number codes identify publication AdditionalSource - Additional source(s) used reconstruct matrix obtain additional metadata matrix (applicable) StudyDuration - Number years observation study (StudyEnd - StudyStart) StudyStart - Study start year StudyEnd - Study end year AnnualPeriodicity - Inverse length projection interval (years) NumberPopulations - number study populations defined authors. Within site replication permanent plots defined separate populations MatrixCriteriaSize - Indicates whether matrix contains stages based size. , indicates measure size MatrixCriteriaOntogeny - Indicates whether matrix contains stages based ontogenic/developmental stages MatrixCriteriaAge - Indicates whether matrix contains stages based age MatrixPopulation - Population name definition matrix recorded, usually given author. See COMPADRE User Guide. Lat - Latitude decimal degrees Lon - Longitude decimal degrees Altitude - Altitude study site (m sea level) Country - 3-letter ISO country code country study took place (multiple countries separated \";\") Continent - Continent study took place Ecoregion - Ecoregion study took place. See COMPADRE User Guide. StudiedSex - Whether study included males (\"M\"), females (\"F\"), sexes (\"M/F\") MatrixComposite - Indicates type matrix population model. Possible values Individual, Mean, Pooled, Seasonal. See COMPADRE User Guide. MatrixTreatment - Describes treatment applied population . yes, includes brief description treatment. , Unmanipulated MatrixCaptivity - Whether species studied wild (W), captivity (C), captured wild population (CW) MatrixStartYear - First year matrix MatrixStartSeason - First season matrix described author (hemisphere-specific) MatrixStartMonth - First month matrix MatrixEndYear - Final year matrix MatrixEndSeason - Final season matrix described author (hemisphere-specific) MatrixEndMonth - Final month matrix MatrixSplit - Whether matrix split components U, F, C (\"Divided\") (\"Indivisible\"). , elements matU, matF, matC filled NA MatrixFec - Whether fecundity measured matrix model Observation - Additional observations recorded database compilers MatrixDimension - Dimension matrix SurvivalIssue - Denotes maximum stage-specific survival value Slot version - list following elements: Version - version number database DateCreated - date .RData file created Agreement - Link COMADRE license agreement object class CompadreDB 150 rows 49 columns. object class CompadreDB 150 rows 49 columns.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for CompadreDB objects — CompadreDB-Methods","title":"Methods for CompadreDB objects — CompadreDB-Methods","text":"page describes variety methods can used CompadreDB objects, including common data frame operations (head, names, merge), conversion methods (.data.frame as_tibble), methods calculate number species (NumberAcceptedSpecies), studies (NumberStudies), matrices (NumberMatrices).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for CompadreDB objects — CompadreDB-Methods","text":"","code":"# S3 method for class 'CompadreDB' as.data.frame(x, ...)  # S3 method for class 'CompadreDB' as_tibble(   x,   .rows = NULL,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   rownames = NULL,   ... )  # S3 method for class 'CompadreDB' head(x, n = 6L, ...)  # S3 method for class 'CompadreDB' tail(x, n = 6L, ...)  # S3 method for class 'CompadreDB' names(x)  # S3 method for class 'CompadreDB' dim(x)  # S3 method for class 'CompadreDB' merge(x, y, ...)  NumberAcceptedSpecies(object)  # S4 method for class 'CompadreDB' NumberAcceptedSpecies(object)  NumberStudies(object)  # S4 method for class 'CompadreDB' NumberStudies(object)  NumberMatrices(object)  # S4 method for class 'CompadreDB' NumberMatrices(object)"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for CompadreDB objects — CompadreDB-Methods","text":"x, object CompadreDB object ... additional arguments .rows passed [tibble::as_tibble()] .name_repair passed [tibble::as_tibble()] rownames passed [tibble::as_tibble()] n number rows extract y data.frame merge x","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for CompadreDB objects — CompadreDB-Methods","text":"return value, called side effects","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Subsetting.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting CompadreDB objects — CompadreDB-Subsetting","title":"Subsetting CompadreDB objects — CompadreDB-Subsetting","text":"CompadreDB objects can subset just like regular data.frame, using either [ subset(). Note, however, mat column always retained subsetting, even included user's column subset.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Subsetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting CompadreDB objects — CompadreDB-Subsetting","text":"","code":"# S4 method for class 'CompadreDB,ANY,ANY,ANY' x[i, j, ..., drop = FALSE]  # S3 method for class 'CompadreDB' subset(x, subset, select, drop = FALSE, ...)"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Subsetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting CompadreDB objects — CompadreDB-Subsetting","text":"x CompadreDB object row indices (see [.data.frame) j column indices (see [.data.frame) ... ignored drop ignored subset logical expression indicating rows keep select expression indicating columns keep","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Subsetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting CompadreDB objects — CompadreDB-Subsetting","text":"return value, called side effects","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Subsetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting CompadreDB objects — CompadreDB-Subsetting","text":"","code":"# subset to the first 10 rows Compadre[1:10, ] #> A COM(P)ADRE database ('CompadreDB') object with 10 SPECIES and 10 MATRICES. #>  #> # A tibble: 10 × 49 #>    mat        SpeciesAuthor  SpeciesAccepted CommonName Genus Family Order Class #>    <list>     <chr>          <chr>           <chr>      <chr> <fct>  <fct> <fct> #>  1 <CompdrMt> Setaria_incra… Setaria incras… NA         Seta… Poace… Poal… Lili… #>  2 <CompdrMt> Lechea_cernua  Lechea cernua   NA         Lech… Cista… Malv… Magn… #>  3 <CompdrMt> Actinostemon_… Actinostemon c… NA         Acti… Eupho… Malp… Magn… #>  4 <CompdrMt> Gaura_neomexi… Gaura neomexic… NA         Gaura Onagr… Myrt… Magn… #>  5 <CompdrMt> Eriogonum_lon… Eriogonum long… Buckwheat  Erio… Polyg… Cary… Magn… #>  6 <CompdrMt> Platanthera_h… Platanthera ho… NA         Plat… Orchi… Aspa… Lili… #>  7 <CompdrMt> Succisa_prate… Succisa praten… NA         Succ… Capri… Dips… Magn… #>  8 <CompdrMt> Haplopappus_r… Pyrrocoma radi… NA         Pyrr… Compo… Aste… Magn… #>  9 <CompdrMt> Astragalus_tr… Astragalus tre… NA         Astr… Legum… Faba… Magn… #> 10 <CompdrMt> Plantago_coro… Plantago coron… NA         Plan… Plant… Lami… Magn… #> # ℹ 41 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, #> #   MatrixCriteriaAge <fct>, MatrixPopulation <chr>, Lat <dbl>, Lon <dbl>, …  # subset to the species 'Echinacea angustifolia' subset(Compadre, SpeciesAccepted == \"Echinacea angustifolia\") #> A COM(P)ADRE database ('CompadreDB') object with 1 SPECIES and 4 MATRICES. #>  #> # A tibble: 4 × 49 #>   mat        SpeciesAuthor   SpeciesAccepted CommonName Genus Family Order Class #>   <list>     <chr>           <chr>           <chr>      <chr> <fct>  <fct> <fct> #> 1 <CompdrMt> Echinacea_angu… Echinacea angu… Narrow-le… Echi… Compo… Aste… Magn… #> 2 <CompdrMt> Echinacea_angu… Echinacea angu… Narrow-le… Echi… Compo… Aste… Magn… #> 3 <CompdrMt> Echinacea_angu… Echinacea angu… Narrow-le… Echi… Compo… Aste… Magn… #> 4 <CompdrMt> Echinacea_angu… Echinacea angu… Narrow-le… Echi… Compo… Aste… Magn… #> # ℹ 41 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, #> #   MatrixCriteriaAge <fct>, MatrixPopulation <chr>, Lat <dbl>, Lon <dbl>, …  # remove the column SurvivalIssue Compadre[, names(Compadre) != \"SurvivalIssue\"] #> A COM(P)ADRE database ('CompadreDB') object with 110 SPECIES and 150 MATRICES. #>  #> # A tibble: 150 × 48 #>    mat        SpeciesAuthor  SpeciesAccepted CommonName Genus Family Order Class #>    <list>     <chr>          <chr>           <chr>      <chr> <fct>  <fct> <fct> #>  1 <CompdrMt> Setaria_incra… Setaria incras… NA         Seta… Poace… Poal… Lili… #>  2 <CompdrMt> Lechea_cernua  Lechea cernua   NA         Lech… Cista… Malv… Magn… #>  3 <CompdrMt> Actinostemon_… Actinostemon c… NA         Acti… Eupho… Malp… Magn… #>  4 <CompdrMt> Gaura_neomexi… Gaura neomexic… NA         Gaura Onagr… Myrt… Magn… #>  5 <CompdrMt> Eriogonum_lon… Eriogonum long… Buckwheat  Erio… Polyg… Cary… Magn… #>  6 <CompdrMt> Platanthera_h… Platanthera ho… NA         Plat… Orchi… Aspa… Lili… #>  7 <CompdrMt> Succisa_prate… Succisa praten… NA         Succ… Capri… Dips… Magn… #>  8 <CompdrMt> Haplopappus_r… Pyrrocoma radi… NA         Pyrr… Compo… Aste… Magn… #>  9 <CompdrMt> Astragalus_tr… Astragalus tre… NA         Astr… Legum… Faba… Magn… #> 10 <CompdrMt> Plantago_coro… Plantago coron… NA         Plan… Plant… Lami… Magn… #> # ℹ 140 more rows #> # ℹ 40 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, …  if (FALSE) { # \\dontrun{ # column selection doesn't include mat, but mat will still be returned with a #  along with a warning subset(Compadre, select = c(\"SpeciesAccepted\", \"Authors\")) } # }"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Tidyverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyverse methods for CompadreDB objects — CompadreDB-Tidyverse","title":"Tidyverse methods for CompadreDB objects — CompadreDB-Tidyverse","text":"CompadreDB methods functions dplyr ggplot2.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Tidyverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidyverse methods for CompadreDB objects — CompadreDB-Tidyverse","text":"","code":"fortify.CompadreDB(model, data, ...)  filter.CompadreDB(.data, ...)  slice.CompadreDB(.data, ...)  arrange.CompadreDB(.data, ...)  mutate.CompadreDB(.data, ...)  group_by.CompadreDB(.data, ..., add = FALSE)  ungroup.CompadreDB(x, ...)  summarize.CompadreDB(.data, ...)  summarise.CompadreDB(.data, ...)  select.CompadreDB(.data, ...)  rename.CompadreDB(.data, ...)  left_join.CompadreDB(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ... )  right_join.CompadreDB(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ... )  inner_join.CompadreDB(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ... )  full_join.CompadreDB(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ... )"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Tidyverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidyverse methods for CompadreDB objects — CompadreDB-Tidyverse","text":"data see fortify ... arguments add Logical indicating whether overwrite existing groups (FALSE) add existing groups (TRUE) x, model, .data CompadreDB object y see join see join copy see join suffix see join","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB-Tidyverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidyverse methods for CompadreDB objects — CompadreDB-Tidyverse","text":"return value, called side effects","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB.html","id":null,"dir":"Reference","previous_headings":"","what":"CompadreDB Class — CompadreDB","title":"CompadreDB Class — CompadreDB","text":"page describes CompadreDB class, including methods accessing slots (see functions CompadreData VersionData), accessing ($) replacing ($<-) columns within data slot, accessing elements version slot (see functions VersionData DateCreated), converting legacy database objects CompadreDB class (see as_cdb).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CompadreDB Class — CompadreDB","text":"","code":"CompadreData(object)  # S4 method for class 'CompadreDB' CompadreData(object)  # S4 method for class 'CompadreDB' x$name  # S4 method for class 'CompadreDB' x$name <- value  # S4 method for class 'CompadreDB,ANY,missing' x[[i, j, ...]]  # S4 method for class 'CompadreDB,ANY,missing' x[[i, j]] <- value  VersionData(object)  # S4 method for class 'CompadreDB' VersionData(object)  Version(object)  # S4 method for class 'CompadreDB' Version(object)  DateCreated(object)  # S4 method for class 'CompadreDB' DateCreated(object)"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CompadreDB Class — CompadreDB","text":"object CompadreDB object x CompadreDB object name name column within x value Vector values assign column , j elements extract replace (see [[.data.frame) ... ignored","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CompadreDB Class — CompadreDB","text":"data tibble-style data frame list-column matrix population models (column mat) variety metadata columns. version list elements Version (database version number), DateCreated (date version release), Agreement (url link User Agreement)","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CompadreDB Class — CompadreDB","text":"Iain M. Stott Tamora D. James","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CompadreDB Class — CompadreDB","text":"","code":"# extract entire 'data' slot dat <- CompadreData(Compadre)  # access the date of database creation DateCreated(Compadre) #> [1] \"Nov_22_2017\"  # extract column SpeciesAccepted Compadre$SpeciesAccepted #>   [1] \"Setaria incrassata\"                   #>   [2] \"Lechea cernua\"                        #>   [3] \"Actinostemon concolor\"                #>   [4] \"Gaura neomexicana coloradensis\"       #>   [5] \"Eriogonum longifolium gnaphalifolium\" #>   [6] \"Platanthera hookeri\"                  #>   [7] \"Succisa pratensis\"                    #>   [8] \"Pyrrocoma radiata\"                    #>   [9] \"Astragalus tremolsianus\"              #>  [10] \"Plantago coronopus\"                   #>  [11] \"Silene glaucifolia pseudoviscosa\"     #>  [12] \"Astragalus peckii\"                    #>  [13] \"Jacquiniella leucomelana\"             #>  [14] \"Syngonanthus nitens\"                  #>  [15] \"Astragalus scaphoides\"                #>  [16] \"Phyllanthus indofischeri\"             #>  [17] \"Heliconia metallica\"                  #>  [18] \"Pediocactus bradyi\"                   #>  [19] \"Clarkia xantiana\"                     #>  [20] \"Trollius europaeus\"                   #>  [21] \"Miconia prasina\"                      #>  [22] \"Eriophorum angustifolium triste\"      #>  [23] \"Molinia caerulea\"                     #>  [24] \"Saxifraga tridactylites\"              #>  [25] \"Pachycereus pecten-aboriginum\"        #>  [26] \"Brassica insularis\"                   #>  [27] \"Limonium geronense\"                   #>  [28] \"Myosotis ramosissima\"                 #>  [29] \"Tradescantia brevifolia\"              #>  [30] \"Stenaria nigricans\"                   #>  [31] \"Alyxia stellata\"                      #>  [32] \"Trillium ovatum\"                      #>  [33] \"Commelina benghalensis\"               #>  [34] \"Cleistesiopsis bifaria\"               #>  [35] \"Calochortus lyallii\"                  #>  [36] \"Hypochaeris radicata\"                 #>  [37] \"Eryngium cuneifolium\"                 #>  [38] \"Plantago coronopus\"                   #>  [39] \"Armeria caespitosa\"                   #>  [40] \"Primula vulgaris\"                     #>  [41] \"Primula veris\"                        #>  [42] \"Lomatium bradshawii\"                  #>  [43] \"Iriartea deltoidea\"                   #>  [44] \"Sarcocapnos pulcherrima\"              #>  [45] \"Agropyron cristatum\"                  #>  [46] \"Astragalus tyghensis\"                 #>  [47] \"Gilia tenuiflora hoffmannii\"          #>  [48] \"Verbascum fontqueri\"                  #>  [49] \"Pyrrocoma radiata\"                    #>  [50] \"Phyllanthus indofischeri\"             #>  [51] \"Carduus nutans\"                       #>  [52] \"Impatiens capensis\"                   #>  [53] \"Cirsium scariosum\"                    #>  [54] \"Solidago mollis\"                      #>  [55] \"Hypericum cumulicola\"                 #>  [56] \"Viola biflora\"                        #>  [57] \"Lepidium davisii\"                     #>  [58] \"Cleistesiopsis bifaria\"               #>  [59] \"Armeria caespitosa\"                   #>  [60] \"Lepanthes rupestris\"                  #>  [61] \"Aechmea nudicaulis\"                   #>  [62] \"Androsace elongata\"                   #>  [63] \"Borassus aethiopum\"                   #>  [64] \"Themeda triandra\"                     #>  [65] \"Abies magnifica\"                      #>  [66] \"Echinacea angustifolia\"               #>  [67] \"Asplenium adulterinum\"                #>  [68] \"Vella pseudocytisus\"                  #>  [69] \"Viola biflora\"                        #>  [70] \"Cheirolophus metlesicsii\"             #>  [71] \"Castanea dentata\"                     #>  [72] \"Anthericum ramosum\"                   #>  [73] \"Plantago media\"                       #>  [74] \"Lepidium davisii\"                     #>  [75] \"Lupinus lepidus\"                      #>  [76] \"Cirsium pitcheri\"                     #>  [77] \"Melampyrum pratense\"                  #>  [78] \"Cleistesiopsis bifaria\"               #>  [79] \"Lepanthes rupestris\"                  #>  [80] \"Pterocereus gaumeri\"                  #>  [81] \"Sambucus sieboldiana\"                 #>  [82] \"Pyrrocoma radiata\"                    #>  [83] \"Daphne rodriguezii\"                   #>  [84] \"Fucus vesiculosus\"                    #>  [85] \"Carduus nutans\"                       #>  [86] \"Tragopogon orientalis\"                #>  [87] \"Asarum canadense\"                     #>  [88] \"Helianthus divaricatus\"               #>  [89] \"Himatanthus drasticus\"                #>  [90] \"Armeria maritima\"                     #>  [91] \"Astragalus alopecurus\"                #>  [92] \"Phyllanthus emblica\"                  #>  [93] \"Dorycnium spectabile\"                 #>  [94] \"Lotus corniculatus\"                   #>  [95] \"Astragalus scaphoides\"                #>  [96] \"Asplenium adulterinum\"                #>  [97] \"Miscanthus giganteus\"                 #>  [98] \"Androsace elongata\"                   #>  [99] \"Asarum canadense\"                     #> [100] \"Magnolia salicifolia\"                 #> [101] \"Lepidium davisii\"                     #> [102] \"Echinacea angustifolia\"               #> [103] \"Hordeum spontaneum\"                   #> [104] \"Phyllanthus indofischeri\"             #> [105] \"Paronychia jamesii\"                   #> [106] \"Aster amellus\"                        #> [107] \"Tragopogon pratensis\"                 #> [108] \"Ambrosia dumosa\"                      #> [109] \"Succisa pratensis\"                    #> [110] \"Lupinus lepidus\"                      #> [111] \"Physaria ovalifolia\"                  #> [112] \"Sphaeralcea coccinea\"                 #> [113] \"Lotus corniculatus\"                   #> [114] \"Mammillaria crucigera\"                #> [115] \"Calochortus lyallii\"                  #> [116] \"Cirsium dissectum\"                    #> [117] \"Heliconia acuminata\"                  #> [118] \"Saxifraga tridactylites\"              #> [119] \"Vella pseudocytisus\"                  #> [120] \"Daphne rodriguezii\"                   #> [121] \"Astragalus peckii\"                    #> [122] \"Pyrrocoma radiata\"                    #> [123] \"Trillium ovatum\"                      #> [124] \"Hordeum spontaneum\"                   #> [125] \"Acer palmatum\"                        #> [126] \"Lupinus tidestromii\"                  #> [127] \"Cleistesiopsis bifaria\"               #> [128] \"Manilkara zapota\"                     #> [129] \"Collinsia verna\"                      #> [130] \"Primula vulgaris\"                     #> [131] \"Gracilaria gracilis\"                  #> [132] \"Commelina benghalensis\"               #> [133] \"Stenaria nigricans\"                   #> [134] \"Echinacea angustifolia\"               #> [135] \"Chamaedorea radicalis\"                #> [136] \"Carex aquatilis minor\"                #> [137] \"Cucurbita pepo\"                       #> [138] \"Rhododendron ponticum\"                #> [139] \"Festuca gracillima\"                   #> [140] \"Platanthera hookeri\"                  #> [141] \"Molinia caerulea\"                     #> [142] \"Aster amellus\"                        #> [143] \"Helenium virginicum\"                  #> [144] \"Lactuca serriola\"                     #> [145] \"Chamaedorea radicalis\"                #> [146] \"Antirrhinum subbaeticum\"              #> [147] \"Geranium sylvaticum\"                  #> [148] \"Aster amellus\"                        #> [149] \"Bromus tectorum\"                      #> [150] \"Echinacea angustifolia\"                # create new list-column with stage-specific survival Compadre$stage_survival <- lapply(Compadre$mat, function(x) colSums(x@matU))"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreLegacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsample of a legacy version of the COMPADRE Plant Matrix Database for testing and examples — CompadreLegacy","title":"Subsample of a legacy version of the COMPADRE Plant Matrix Database for testing and examples — CompadreLegacy","text":"CompadreLegacy subsample COMPADRE Plant Matrix Database legacy format (class 'list'), use testing examples. full documentation see COMPADRE User Guide.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreLegacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsample of a legacy version of the COMPADRE Plant Matrix Database for testing and examples — CompadreLegacy","text":"","code":"CompadreLegacy"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreLegacy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subsample of a legacy version of the COMPADRE Plant Matrix Database for testing and examples — CompadreLegacy","text":"list four elements: metadata - data frame following 47 columns: SpeciesAuthor - Binomial species name given paper's author SpeciesAccepted - Accepted binomial species name taken Plant List Catalogue Life CommonName - Common name species used publication Genus - Taxonomic genus accepted species belongs Family - Family species belongs Order - Order species belongs Class - Class species belongs Phylum - Phylum species belongs Kingdom - Kingdom species belongs OrganismType - Organism type (see COMPADRE User Guide documentation) DicotMonoc - Whether species dicot monocot. Non-angiosperms NA. AngioGymno - Whether species angiosperm gymnosperm. Non-plants NA. Authors - Last name authors (separated \";\") Journal - Abbreviated journal title, type source document (e.g. \"PhD thesis\") YearPublication - Year publication DOI.ISBN - Digital Object Identifier International Standard Book Number codes identify publication (note name changed DOI_ISBN later database versions.) AdditionalSource - Additional source(s) used reconstruct matrix obtain additional metadata matrix (applicable) StudyDuration - Number years observation study (StudyEnd - StudyStart) StudyStart - Study start year StudyEnd - Study end year AnnualPeriodicity - Inverse length projection interval (years). Note name changed ProjectionInterval later database versions. NumberPopulations - number study populations defined authors. Within site replication permanent plots defined separate populations MatrixCriteriaSize - Indicates whether matrix contains stages based size. , indicates measure size MatrixCriteriaOntogeny - Indicates whether matrix contains stages based ontogenic/developmental stages MatrixCriteriaAge - Indicates whether matrix contains stages based age MatrixPopulation - Population name definition matrix recorded, usually given author. See COMPADRE User Guide. Lat - Latitude decimal degrees Lon - Longitude decimal degrees Altitude - Altitude study site (m sea level) Country - 3-letter ISO country code country study took place (multiple countries separated \";\") Continent - Continent study took place Ecoregion - Ecoregion study took place. See COMPADRE User Guide. StudiedSex - Whether study included males (\"M\"), females (\"F\"), sexes (\"M/F\") MatrixComposite - Indicates type matrix population model. Possible values Individual, Mean, Pooled, Seasonal. See COMPADRE User Guide. MatrixTreatment - Describes treatment applied population . yes, includes brief description treatment. , Unmanipulated MatrixCaptivity - Whether species studied wild (W), captivity (C), captured wild population (CW) MatrixStartYear - First year matrix MatrixStartSeason - First season matrix described author (hemisphere-specific) MatrixStartMonth - First month matrix MatrixEndYear - Final year matrix MatrixEndSeason - Final season matrix described author (hemisphere-specific) MatrixEndMonth - Final month matrix MatrixSplit - Whether matrix split components U, F, C (\"Divided\") (\"Indivisible\"). , elements matU, matF, matC filled NA MatrixFec - Whether fecundity measured matrix model Observation - Additional observations recorded database compilers MatrixDimension - Dimension matrix SurvivalIssue - Denotes maximum stage-specific survival value mat - list population projection models, also list format. list element contains four matrices: matA - matrix population model matU - survival- growth-related component matA matF - sexual reproduction component matA matC - clonal reproduction component matA matrixClass - list data frames, following columns: MatrixClassOrganized - Standardized stage class matrix population model MatrixClassAuthor - Stage description original publication MatrixClassNumber - Integer stage number version - list following elements: Version - version number database DateCreated - date .RData file created NumberAcceptedSpecies - number accepted species original version NumberStudies - number studies original version NumberMatrices - number matrices original version Agreement - Link COMADRE license agreement","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreMatrixMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for working with matrices in com(p)adre — CompadreMatrixMethods","title":"Methods for working with matrices in com(p)adre — CompadreMatrixMethods","text":"page describes methods accessing matrix information CompadreMat CompadreDB objects. methods working matrices applicable CompadreMat CompadreDB objects. described page (along couple) methods applicable CompadreMat CompadreDB objects).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreMatrixMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for working with matrices in com(p)adre — CompadreMatrixMethods","text":"","code":"matA(object)  # S4 method for class 'CompadreMat' matA(object)  # S4 method for class 'CompadreDB' matA(object)  # S4 method for class 'list' matA(object)  matU(object)  # S4 method for class 'CompadreMat' matU(object)  # S4 method for class 'CompadreDB' matU(object)  # S4 method for class 'list' matU(object)  matF(object)  # S4 method for class 'CompadreMat' matF(object)  # S4 method for class 'CompadreDB' matF(object)  # S4 method for class 'list' matF(object)  matC(object)  # S4 method for class 'CompadreMat' matC(object)  # S4 method for class 'CompadreDB' matC(object)  # S4 method for class 'list' matC(object)  matrixClass(object)  # S4 method for class 'CompadreMat' matrixClass(object)  # S4 method for class 'CompadreDB' matrixClass(object)  # S4 method for class 'list' matrixClass(object)  MatrixClassAuthor(object)  # S4 method for class 'CompadreMat' MatrixClassAuthor(object)  # S4 method for class 'CompadreDB' MatrixClassAuthor(object)  # S4 method for class 'list' MatrixClassAuthor(object)  MatrixClassOrganized(object)  # S4 method for class 'CompadreMat' MatrixClassOrganized(object)  # S4 method for class 'CompadreDB' MatrixClassOrganized(object)  # S4 method for class 'list' MatrixClassOrganized(object)  MatrixClassNumber(object)  # S4 method for class 'CompadreMat' MatrixClassNumber(object)  # S4 method for class 'CompadreDB' MatrixClassNumber(object)  # S4 method for class 'list' MatrixClassNumber(object)"},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreMatrixMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for working with matrices in com(p)adre — CompadreMatrixMethods","text":"object CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/CompadreMatrixMethods.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Methods for working with matrices in com(p)adre — CompadreMatrixMethods","text":"matA matrix population model (.e. square projection matrix) matU survival component matrix population model (.e. square projection matrix reflecting survival-related transitions; e.g. progression, stasis, retrogression) matF sexual component matrix population model (.e. square projection matrix reflecting transitions due sexual reproduction) matC clonal component matrix population model (.e. square projection matrix reflecting transitions due clonal reproduction) matrixClass data frame columns MatrixClassOrganized (elements \"active\", \"prop\", \"dorm\") MatrixClassAuthor (matrix author's stage description), MatrixClassNumber (integer stage number)","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/Rcompadre-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Rcompadre: Utilities for using the 'COM(P)ADRE' Matrix Model Database — Rcompadre-package","title":"Rcompadre: Utilities for using the 'COM(P)ADRE' Matrix Model Database — Rcompadre-package","text":"Utility functions interacting 'COMPADRE' 'COMADRE' databases matrix population models. Described Jones et al. (2021) doi:10.1101/2021.04.26.441330 .","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/Rcompadre-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rcompadre: Utilities for using the 'COM(P)ADRE' Matrix Model Database — Rcompadre-package","text":"Maintainer: Owen Jones jones@biology.sdu.dk (ORCID) Authors: Patrick Barks barks@biology.sdu.dk (ORCID) Danny Buss dlb50@cam.ac.uk Roberto Salguero-Gomez rob.salguero@zoo.ox.ac.uk (ORCID) Iain Stott stott@biology.sdu.dk (ORCID) William K. Petry wpetry@ncsu.edu (ORCID) Tamora James tamoradjames@protonmail.com (ORCID) Julia Jones juagjones@gmail.com (ORCID) Gesa Romer gesa@biology.sdu.dk (ORCID) Sam Levin levisc8@gmail.com (ORCID)","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/as_cdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","title":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","text":"Convert legacy COM(P)ADRE database object (class 'list') CompadreDB object.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/as_cdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","text":"","code":"as_cdb(from)"},{"path":"https://github.com/jonesor/Rcompadre/reference/as_cdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","text":"legacy COM(P)ADRE database","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/as_cdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","text":"CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/as_cdb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","text":"Iain M. Stott","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/as_cdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert legacy COM(P)ADRE database object to CompadreDB — as_cdb","text":"","code":"Compadre <- as_cdb(CompadreLegacy)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_build_cdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CompadreDB object from user-specified data — cdb_build_cdb","title":"Create a CompadreDB object from user-specified data — cdb_build_cdb","text":"Creates CompadreDB object data provided user form matrices metadata. Users can provide either list matrices (.e. whole matrix population model) lists process-based submatrices matU, matFand matC. latter case, assume matA = matU + matF + matC. one type submatrices provided, others assumed 0. matrices provided, submatrices recorded `NA`.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_build_cdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CompadreDB object from user-specified data — cdb_build_cdb","text":"","code":"cdb_build_cdb(   mat_a = NULL,   mat_u = NULL,   mat_f = NULL,   mat_c = NULL,   stages = NULL,   version = NULL,   metadata = NULL )"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_build_cdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CompadreDB object from user-specified data — cdb_build_cdb","text":"mat_a `list` matrices mat_u `list` U matrices (representing survival growth) mat_f `list` F matrices (representing sexual reproduction) mat_c `list` C matrices (representing clonal reproduction) stages `list` stage definitions provided `data.frame`s include two columns: `MatrixClassOrganized` `MatrixClassAuthor`. argument provided, numeric stage names generated automatically version optional string allowing users add version information output object. argument provided current date time used. metadata `data.frame` metadata associated matrix. Metadata provided row order matrices placed lists.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_build_cdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CompadreDB object from user-specified data — cdb_build_cdb","text":"valid CompadreDB object","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_build_cdb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a CompadreDB object from user-specified data — cdb_build_cdb","text":"Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_build_cdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CompadreDB object from user-specified data — cdb_build_cdb","text":"","code":"# If you only have A matrices  mat_a1 <- rbind(   c(0.1, 1.9),   c(0.5, 0.7) )  mat_a2 <- rbind(   c(0.2, 1.4, 2.3),   c(0.6, 0.3, 1.1),   c(0.2, 0.2, 1.5) )  mat_a3 <- rbind(   c(0.1, 2.1),   c(0.3, 0.4) )  # Place the matrices into a list mat_a_list <- mget(ls(pattern = \"mat_a[0-9]\"))  my_compadre <- cdb_build_cdb(mat_a = mat_a_list, version = \"testrun\") #> Warning: Metadata does not include a `SpeciesAccepted` column, so number #>               of species not provided when viewing object. my_compadre #> A COM(P)ADRE database ('CompadreDB') object with ?? SPECIES and 3 MATRICES. #>  #> # A tibble: 3 × 2 #>   mat        matrixID #>   <list>        <int> #> 1 <CompdrMt>        1 #> 2 <CompdrMt>        2 #> 3 <CompdrMt>        3   mat_u1 <- rbind(   c(0.1, 0.0),   c(0.5, 0.7) )  mat_u2 <- rbind(   c(0.2, 0.0, 0.0),   c(0.6, 0.3, 1.1),   c(0.2, 0.2, 1.5) )  mat_f1 <- rbind(   c(0.0, 1.9),   c(0.0, 0.0) )  mat_f2 <- rbind(   c(0.0, 1.4, 2.3),   c(0.0, 0.0, 0.0),   c(0.0, 0.0, 0.0) )  mat_u_list <- mget(ls(pattern = \"mat_u[0-9]\")) mat_f_list <- mget(ls(pattern = \"mat_f[0-9]\"))  meta <- data.frame(idNum = 1:2, SpeciesAccepted = c(\"A\", \"B\"), x = 4:5)  stageInfo <- list(   data.frame(     MatrixClassOrganized = rep(\"active\", 2),     MatrixClassAuthor = c(\"small\", \"large\")   ),   data.frame(     MatrixClassOrganized = rep(\"active\", 3),     MatrixClassAuthor = c(\"small\", \"medium\", \"large\")   ) )   my_compadre <- cdb_build_cdb(   mat_u = mat_u_list, mat_f = mat_f_list,   metadata = meta, stages = stageInfo ) my_compadre #> A COM(P)ADRE database ('CompadreDB') object with 2 SPECIES and 2 MATRICES. #>  #> # A tibble: 2 × 4 #>   mat        idNum SpeciesAccepted     x #>   <list>     <int> <chr>           <int> #> 1 <CompdrMt>     1 A                   4 #> 2 <CompdrMt>     2 B                   5  my_compadre <- cdb_build_cdb(   mat_u = mat_u_list, mat_f = mat_f_list,   metadata = meta ) my_compadre #> A COM(P)ADRE database ('CompadreDB') object with 2 SPECIES and 2 MATRICES. #>  #> # A tibble: 2 × 4 #>   mat        idNum SpeciesAccepted     x #>   <list>     <int> <chr>           <int> #> 1 <CompdrMt>     1 A                   4 #> 2 <CompdrMt>     2 B                   5"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_check_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","title":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","text":"Takes vector species names checks whether species represented within CompadreDB object. outputs either data frame depicting species interest whether occur database (TRUE/FALSE), , return_db == TRUE, CompadreDB object subset species interest.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_check_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","text":"","code":"cdb_check_species(cdb, species, return_db = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_check_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","text":"cdb CompadreDB object species Character vector binomial species names, genus specific epithet separated either underscore space (e.g. c(\"Acipenser_fulvescens\", \"Borrelia_burgdorferi\")) return_db Logical argument indicating whether database returned","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_check_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","text":"return_db == FALSE, returns data frame column   species names column indicating whether species occurs   database. return_db == TRUE, returns subset cdb   containing species within argument species.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_check_species.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","text":"Danny Buss <dlb50@cam.ac.uk> Owen R. Jones <jones@biology.sdu.dk> Rob Salguero-Gomez <rob.salguero@zoo.ox.ac.uk> Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_check_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a COM(P)ADRE database contains one or more species of interest — cdb_check_species","text":"","code":"species <- c(\"Primula vulgaris\", \"Trillium ovatum\", \"Homo sapiens\") cdb_check_species(Compadre, species) #>            species in_db #> 1 Primula vulgaris  TRUE #> 2  Trillium ovatum  TRUE #> 3     Homo sapiens FALSE CompadreSubset <- cdb_check_species(Compadre, species, return_db = TRUE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"Collapses CompadreDB object averaging matrices levels one grouping variables (e.g. SpeciesAuthor, MatrixPopulation). given study species, COM(P)ADRE database may contain multiple matrices, reflecting different combinations population, year, /treatment. Collapsing allows user obtain single 'grand mean matrix' group interest (e.g. MatrixPopulation), therefore limit pseudoreplication. members group must matrix dimension (consider adding MatrixDimension grouping variable). members group ProjectionInterval matrix stage class definitions (see cdb_id_stages). Note Seasonal matrices collapsed using method (matrix-multiplied rather averaged).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"","code":"cdb_collapse(cdb, columns)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"cdb CompadreDB object columns Vector grouping variables collapse (corresponding columns within cdb)","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"give warning members group share ProjectionInterval stage class definitions, cdb contains rows MatrixComposite value \"Seasonal\". Prior collapsing, columns class 'factor' coerced 'character', list-column apart mat removed. Within group, rows given column collapsed follows: mat: matrices averaged using mpm_mean, stage     class definitions taken first group member MatrixComposite: return original value N = 1, else return     \"Collapsed\" Lat: re-calculated averaging Lat column (available) Lon: re-calculated averaging Lon column (available) SurvivalIssue: re-calculated collapsed mat     (max(colSums(matU))) others: elements equal return unique value, else     paste together unique values separated \"; \"","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"Patrick M. Barks <patrick.barks@gmail.com> Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse a COM(P)ADRE database by averaging matrices over levels of one or more grouping variables — cdb_collapse","text":"","code":"# filter out Seasonal matrices CompSub <- subset(Compadre, MatrixComposite != \"Seasonal\")  # add column identifying unique stage class definitions CompSub$id_stage <- cdb_id_stages(CompSub, \"MatrixClassOrganized\")  # collapse CompCollapse <- cdb_collapse(CompSub, columns = c(\"id_stage\"))"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","title":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","text":"Prints summary differences two CompadreDB objects, including number species, studies, matrices . argument verbose == TRUE, additionally prints list species studies present one database .","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","text":"","code":"cdb_compare(cdb1, cdb2, verbose = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","text":"cdb1, cdb2 CompadreDB objects compare verbose Logical argument indicating whether return lots detail","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","text":"NULL. Output printed rather returned.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_compare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","text":"Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two versions or subsets of a COM(P)ADRE database — cdb_compare","text":"","code":"Compadre1 <- subset(Compadre, Continent == \"Asia\") Compadre2 <- subset(Compadre, Continent == \"Africa\")  cdb_compare(Compadre1, Compadre2) #> Quick Summary... #>  #> cdb1 contains data for: #> 6 source papers #> 6 accepted species #> 9 matrices #>  #> cdb2 contains data for: #> 3 source papers #> 3 accepted species #> 3 matrices #>"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"Fetches current version COM(P)ADRE database https://compadre-db.org, load version stored local .RData file.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"","code":"cdb_fetch(cdb, version = NULL, flag = FALSE, userComment = NULL, quiet = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"cdb Either \"comadre\" \"compadre\" (case insensitive) fetch recent database https://compadre-db.org, path existing COMPADRE database (.e. .RData file) stored local machine. version Optional. version number particular database downloaded e.g. \"3.0.0\". included (default) latest versions downloaded. flag Logical argument `TRUE` automatically run cdb_flag add logical columns metadata flag potential problems matrix population models. Default `FALSE`. userComment optional string enable users add comment attribute returned data frame. useful keeping track multiple versions database. Accessed `attributes(db)$comment`. quiet logical argument. `TRUE` download message includes version information link user agreement suppressed. Default `FALSE`.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"downloaded databases include set attributes accessible   `attributes`. include version information date time   creation.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"Owen R. Jones <jones@biology.sdu.dk> Patrick M. Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch the COM(P)ADRE database from compadre-db.org or a local file — cdb_fetch","text":"","code":"if (FALSE) { # \\dontrun{ # Download latest version of COMPADRE direct from the website compadre <- cdb_fetch(\"compadre\")  # Examine the attributes of the downloaded database attributes(compadre)  # Download COMPADRE version 3.0.0 direct from the website compadre <- cdb_fetch(\"compadre\", version = \"3.0.0\")  # using file path to downloaded data compadre <- cdb_fetch(\"data/COMPADRE_v.5.0.1.RData\") } # }"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"Adds columns data slot `CompadreDB` object flag potential problems matrix population models. columns can subsequently used subset database logical argument. Optional checks include: check_NA_A: missing values `matA`? Missing (`NA`) values   matrices prevent calculations using matrices. check_NA_U: missing values `matU`? Missing (`NA`) values   matrices prevent calculations using matrices. check_NA_F: missing values `matF`? Missing (`NA`) values   matrices prevent calculations using matrices. check_NA_C: missing values `matC`? Missing (`NA`) values   matrices prevent calculations using matrices. check_zero_U: `matU` zeros (including `NA`)? Submatrices   composed entirely zero values can problematic. may good   biological reasons phenomenon. example, particular   focal population particular focal year, truly zero   survival recorded. Nevertheless, zero-value submatrices can cause   calculations fail may necessary exclude . check_zero_F: `matF` zeros (including `NA`)? Submatrices   composed entirely zero values can problematic. may good   biological reasons phenomenon. example, particular   focal population particular focal year, truly zero   reproduction recorded. Nevertheless, zero-value submatrices can cause   calculations fail may necessary exclude . check_zero_U_colsum: Columns `matU` sum zero imply   survival particular stage. may   perfectly valid parameterisation particular year/place   biologically unreasonable longer term users may wish exclude   problematic matrices analysis. check_singular_U: `matU` singular? Matrices said   singular inverted. Inversion required many matrix   calculations , therefore, singularity can cause calculations   fail. check_component_sum: `matU`/`matF`/`matC` submatrices sum   `matA` (see Details)? complete MPM (`matA`) can split   component submatrices (.e., `matU`, `matF`  `matC`). sum   submatrices equal complete MPM (.e., `matA` = `matU` +   `matF` + `matC`). Sometimes, however, errors occur submatrices   sum `matA`. Normally, caused rounding errors,   significant errors possible. check_ergodic: `matA` ergodic (see   isErgodic)? matrix calculations require   MPM (`matA`) ergodic. Ergodic MPMs single   asymptotic stable state depend initial stage structure.   Conversely, non-ergodic MPMs multiple asymptotic   stable states, depend initial stage structure. MPMs   non-ergodic usually biologically unreasonable, terms   life cycle description projected dynamics. cause   calculations fail. check_irreducible: `matA` irreducible (see   isIrreducible)? matrix calculations require   MPM (`matA`) irreducible. Irreducible MPMs   parameterised transition rates facilitate pathways stages   stages. Conversely, reducible MPMs depict incomplete life cycles   pathways stages every stage possible. MPMs   reducible usually biologically unreasonable, terms   life cycle description projected dynamics. cause   calculations fail. Irreducibility necessary sufficient   ergodicity. check_primitive: `matA` primitive (see   isPrimitive)? primitive matrix non-negative   matrix irreducible single eigenvalue maximum   modulus. check therefore redundant due overlap   `check_irreducible` `checkErdogic`. check_surv_gte_1: `matU` contains values equal   greater 1? Survival bounded 0 1. Values excess   1 biologically unreasonable.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"","code":"cdb_flag(   cdb,   checks = c(\"check_NA_A\", \"check_NA_U\", \"check_NA_F\", \"check_NA_C\", \"check_zero_U\",     \"check_zero_F\", \"check_zero_C\", \"check_zero_U_colsum\", \"check_singular_U\",     \"check_component_sum\", \"check_ergodic\", \"check_irreducible\", \"check_primitive\",     \"check_surv_gte_1\") )"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"cdb CompadreDB object checks Character vector specifying checks run. Defaults , .e. c(\"check_NA_A\", \"check_NA_U\", \"check_NA_F\",   \"check_NA_C\", \"check_zero_U\", \"check_singular_U\", \"check_component_sum\",   \"check_ergodic\", \"check_irreducible\", \"check_primitive\",   \"check_surv_gte_1\")","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"Returns cdb extra columns appended data slot   (columns names corresponding elements   checks) indicate (TRUE/FALSE) whether potential   problems matrices corresponding given row data.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"flag check_component_sum, value NA returned matrix sum matU, matF, matC consists zeros /NA, indicating matrix split.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"Stott, ., Townley, S., & Carslake, D. 2010. reducibility   ergodicity population projection matrix models. Methods Ecology   Evolution. 1 (3), 242-252","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"Owen Jones <jones@biology.sdu.dk> Julia Jones <juliajones@biology.sdu.dk> Roberto Salguero-Gomez <rob.salguero@zoo.ox.ac.uk> Danny Buss <dlb50@cam.ac.uk> Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag potential issues in matrices of a COM(P)ADRE database — cdb_flag","text":"","code":"CompadreFlag <- cdb_flag(Compadre)  # only check whether matA has missing values, and whether matA is ergodic CompadreFlag <- cdb_flag(Compadre, checks = c(\"check_NA_A\", \"check_ergodic\"))"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","title":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","text":"Converts CompadreDB object flat data frame extracting data slot, splitting mat column separate columns component (matrices matA, matU, matF, matC, vectors MatrixClassAuthor, MatrixClassOrganized). component matrices vectors within six new columns stored string format database can written flat file format csv (see string_representation).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","text":"","code":"cdb_flatten(cdb)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","text":"cdb CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","text":"data frame based data slot cdb,   column mat replaced six separate columns (matrices   matA, matU, matF, matC, vectors   MatrixClassAuthor, MatrixClassOrganized), whose elements   matrices vectors string representation.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flatten.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","text":"Owen R. Jones <jones@biology.sdu.dk> Patrick M. Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a COM(P)ADRE database to a flat data frame with matrices and vectors stored in string representation — cdb_flatten","text":"","code":"CompadreFlat <- cdb_flatten(Compadre)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"Creates vector integer identifiers corresponding rows CompadreDB object, based unique combinations elements given set columns.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"","code":"cdb_id(cdb, columns)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"cdb CompadreDB object columns Vector column names unique combinations identified","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"Vector integer identifiers corresponding rows   cdb, based unique combinations elements columns.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"Identifiers assigned pasting together relevant columns, assigning factor levels based alphabetical order, converting factor levels integers.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of a given set of columns — cdb_id","text":"","code":"cdb_id(Compadre, columns = c(\"SpeciesAuthor\", \"MatrixTreatment\")) #>   [1] 108  71   3  53  48 100 111  57  20  98  93  17  69 113  19  96  62  92 #>  [19]  35 119  85  49  88 107  90  23  76  89 115  58   6 118  39  37  25  66 #>  [37]  50  98  11 102 101  77  68 106   5  21  55 121  57  95  26  67  34 109 #>  [55]  65 122  73  37  11  72   4   8  22 114   1  45  14 120 123  31  28   9 #>  [73]  99  74  79  33  84  37  72 103 105  57  42  52  26 116  13  60  63  12 #>  [91]  16  94  43  78  18  14  86   8  13  81  73  44  64  97  91  15 117   7 #> [109] 112  79  75 110  78  82  25  32  61 107 120  42  17  57 118  64   2  80 #> [127]  36  83  38 102  56  40  58  47  29  27  41 104  51 100  87  15  59  70 #> [145]  30  10  54  15  24  46"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":null,"dir":"Reference","previous_headings":"","what":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"Creates vector integer identifiers corresponding rows CompadreDB object, based unique combinations column 'SpeciesAccepted' list matrix stage class definitions (either 'MatrixClassAuthor' 'MatrixClassOrganized').","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"","code":"cdb_id_stages(cdb, stage_def = \"MatrixClassAuthor\")"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"cdb CompadreDB object stage_def Whether define matrix stage class based \"MatrixClassAuthor\" \"MatrixClassOrganized\" (see Details). Defaults \"MatrixClassAuthor\".","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"Vector integer identifiers corresponding rows   cdb.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"vector 'MatrixClassOrganized' reflects standardized stage classes ('prop', 'active', 'dorm'), whereas 'MatrixClassAuthor' reflects description stage classes defined original author (e.g. c('Seedling', 'Medium rosette', 'Large (2 rosettes)', 'Flowering')). 'MatrixClassAuthor' definitions less standardized, prone typos lead slight differences stage descriptions matrices really stage classes (e.g. set matrices single study/species/population). Therefore, using 'MatrixClassAuthor' define stage classes potentially prone mistakenly 'splitting' identifiers really . 'MatrixClassOrganized' opposite problem. possible two matrices given study stage definitions based 'MatrixClassOrganized', legitimately differ stage definitions defined author. Therefore, using 'MatrixClassAuthor' define stage classes potentially prone mistakenly 'lumping' identifiers actually differ. majority studies COM(P)ADRE use single set stage definitions matrices, typos rare, results different stage definitions usually similar. Note, however, actual integers returned different stage definitions likely different (based alphabetical order).","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_stages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create integer identifiers for a COM(P)ADRE database corresponding to unique combinations of species and matrix stage class definitions — cdb_id_stages","text":"","code":"cdb_id_stages(Compadre, stage_def = \"MatrixClassOrganized\") #>   [1]  98  65   3  49  44  89 103  93  20  87  99  17  63 105  19  85  56  83 #>  [19]  34 111  77  45  79  97  81  23  68  80 107 102   6 110  37  35  25  60 #>  [37]  46  87  11  91  90  69  62  96   5  21  51 113  93  85  26  61  33 100 #>  [55]  59 114  67  35  11  66   4   8  22 106   1  43  14 112 114  30  28   9 #>  [73]  88  67  71  32  76  35  66  92  95  93  40  48  26 108  13  54  57  12 #>  [91]  16  84  41  70  18  14  78   8  13  73  67  42  58  85  82  15 109   7 #> [109] 104  71  86 101  70  74  25  31  55  97 112  40  17  93 110  58   2  72 #> [127]  35  75  36  91  52  38 102  43  29  27  39  94  47  89  79  15  53  64 #> [145]  29  10  50  15  24  43"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"Creates vector integer study identifiers corresponding rows CompadreDB object, based unique combinations columns 'Authors', 'Journal', 'YearPublication', 'DOI_ISBN' (optionally, different set columns supplied user).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"","code":"cdb_id_studies(   cdb,   columns = c(\"Authors\", \"Journal\", \"YearPublication\", \"DOI_ISBN\") )"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"cdb CompadreDB object columns Vector column names unique combinations identified. Defaults c(\"Authors\", \"Journal\", \"YearPublication\", \"DOI_ISBN\").","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"Vector integer study identifiers corresponding rows   cdb, based unique combinations elements columns.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"Identifiers assigned pasting together relevant columns, assigning factor levels based alphabetical order, converting factor levels integers.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_id_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector of unique study identifiers from a COM(P)ADRE database — cdb_id_studies","text":"","code":"Compadre$StudyID <- cdb_id_studies(Compadre)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_mean_matF.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","title":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","text":"Takes CompadreDB object calculates grand mean fecundity matrix unique population (mean population-specific fecundity matrices, including fecundity matrices MatrixComposite == 'Mean'). Populations defined based unique combinations columns 'SpeciesAuthor', 'MatrixPopulation', 'MatrixDimension', (optionally, different set columns supplied user). main purpose function identify stage classes potentially reproductive (.e. absence fecundity given stage class year necessarily indicate stage question non-reproductive).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_mean_matF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","text":"","code":"cdb_mean_matF(   cdb,   columns = c(\"SpeciesAuthor\", \"MatrixPopulation\", \"MatrixDimension\") )"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_mean_matF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","text":"cdb CompadreDB object columns Vector column names unique populations identified. Defaults c(\"SpeciesAuthor\", \"MatrixPopulation\", \"MatrixDimension\").","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_mean_matF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","text":"Returns list matrices, representing mean fecundity matrix   associated row database.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_mean_matF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","text":"Owen R. Jones <jones@biology.sdu.dk> Danny Buss <dlb50@cam.ac.uk> Julia Jones <juliajones@biology.sdu.dk> Iain Stott <stott@biology.sdu.dk> Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_mean_matF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a population-specific mean fecundity matrix for each set of matrices in a COM(P)ADRE database — cdb_mean_matF","text":"","code":"# print matF associated with row 16 of database Compadre$mat[[16]] #>   MatrixClassOrganized #> 1                 prop #> 2               active #> 3               active #> 4               active #> 5               active #> 6               active #> 7               active #>                                           MatrixClassAuthor #> 1                                     Seeds in the seedbank #> 2                                     Seedling: <1 year old #> 3                               Small saplings: ≤ 0,072 cm² #> 4                    Medium saplings: 0,072 < d ≤ 0,787 cm² #> 5                    Large saplings: 0,787 < d ≤ 19,643 cm² #> 6 Small adults: (with reproduction) 19,643 < d ≤ 63,643 cm² #> 7            Large adults: (with reproduction) > 63,643 cm² #>  #> matA: #>       1     2     3     4     5     6      7 #> 1 0.586 0.000 0.000 0.000 0.000 73.25 87.800 #> 2 0.015 0.000 0.000 0.000 0.000  1.24  1.490 #> 3 0.000 0.384 0.411 0.063 0.000  0.00  0.000 #> 4 0.000 0.384 0.429 0.785 0.000  0.00  0.000 #> 5 0.000 0.000 0.000 0.090 0.923  0.00  0.000 #> 6 0.000 0.000 0.000 0.000 0.020  0.88  0.000 #> 7 0.000 0.000 0.000 0.000 0.000  0.02  0.962 #>  #> matU: #>       1     2     3     4     5    6     7 #> 1 0.586 0.000 0.000 0.000 0.000 0.00 0.000 #> 2 0.015 0.000 0.000 0.000 0.000 0.00 0.000 #> 3 0.000 0.384 0.411 0.063 0.000 0.00 0.000 #> 4 0.000 0.384 0.429 0.785 0.000 0.00 0.000 #> 5 0.000 0.000 0.000 0.090 0.923 0.00 0.000 #> 6 0.000 0.000 0.000 0.000 0.020 0.88 0.000 #> 7 0.000 0.000 0.000 0.000 0.000 0.02 0.962 #>  #> matF: #>   1 2 3 4 5     6     7 #> 1 0 0 0 0 0 73.25 87.80 #> 2 0 0 0 0 0  1.24  1.49 #> 3 0 0 0 0 0  0.00  0.00 #> 4 0 0 0 0 0  0.00  0.00 #> 5 0 0 0 0 0  0.00  0.00 #> 6 0 0 0 0 0  0.00  0.00 #> 7 0 0 0 0 0  0.00  0.00 #>  #> matC: #>   1 2 3 4 5 6 7 #> 1 0 0 0 0 0 0 0 #> 2 0 0 0 0 0 0 0 #> 3 0 0 0 0 0 0 0 #> 4 0 0 0 0 0 0 0 #> 5 0 0 0 0 0 0 0 #> 6 0 0 0 0 0 0 0 #> 7 0 0 0 0 0 0 0 #>   # create list of meanMatFs meanF <- cdb_mean_matF(Compadre)  # print meanMatF associated with row 16 of database meanF[[16]] #>    F1 F2 F3 F4 F5        F6         F7 #> F1  0  0  0  0  0 77.316667 261.666667 #> F2  0  0  0  0  0  1.306667   4.196667 #> F3  0  0  0  0  0  0.000000   0.000000 #> F4  0  0  0  0  0  0.000000   0.000000 #> F5  0  0  0  0  0  0.000000   0.000000 #> F6  0  0  0  0  0  0.000000   0.000000 #> F7  0  0  0  0  0  0.000000   0.000000"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata from a COM(P)ADRE database — cdb_metadata","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"Extract tibble metadata information CompadreDB object, dropping matrix column \"mat\".","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"","code":"cdb_metadata(cdb)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"cdb CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"Tibble metadata columns cdb","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"Transforms large CompadreDB object tibble drops matrix column (\"mat\").","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"Gesa Romer <gesa.roemer@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract metadata from a COM(P)ADRE database — cdb_metadata","text":"","code":"Compadre_metadata <- cdb_metadata(Compadre)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","title":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","text":"Merges two CompadreDB objects via row-bind data slots.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","text":"","code":"cdb_rbind(cdb1, cdb2)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","text":"cdb1, cdb2 CompadreDB objects","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","text":"CompadreDB object created binding rows cdb1   cdb2","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_rbind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","text":"Sam Levin <levisc8@gmail.com> Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two COM(P)ADRE databases via row-bind — cdb_rbind","text":"","code":"Compadre1 <- subset(Compadre, Continent == \"Asia\") Compadre2 <- subset(Compadre, Continent == \"Africa\")  cdb_rbind(Compadre1, Compadre2) #> A COM(P)ADRE database ('CompadreDB') object with 9 SPECIES and 12 MATRICES. #>  #> # A tibble: 12 × 49 #>    mat        SpeciesAuthor  SpeciesAccepted CommonName Genus Family Order Class #>    <list>     <chr>          <chr>           <chr>      <chr> <fct>  <fct> <fct> #>  1 <CompdrMt> Phyllanthus_i… Phyllanthus in… Amla       Phyl… Phyll… Malp… Magn… #>  2 <CompdrMt> Phyllanthus_i… Phyllanthus in… Amla       Phyl… Phyll… Malp… Magn… #>  3 <CompdrMt> Sambucus_race… Sambucus siebo… NA         Samb… Adoxa… Dips… Magn… #>  4 <CompdrMt> Phyllanthus_e… Phyllanthus em… Amla       Phyl… Phyll… Malp… Magn… #>  5 <CompdrMt> Magnolia_sali… Magnolia salic… NA         Magn… Magno… Magn… Magn… #>  6 <CompdrMt> Hordeum_spont… Hordeum sponta… Wild barl… Hord… Poace… Poal… Lili… #>  7 <CompdrMt> Phyllanthus_i… Phyllanthus in… Amla       Phyl… Phyll… Malp… Magn… #>  8 <CompdrMt> Hordeum_spont… Hordeum sponta… Wild barl… Hord… Poace… Poal… Lili… #>  9 <CompdrMt> Acer_amoenum   Acer palmatum   NA         Acer  Sapin… Sapi… Magn… #> 10 <CompdrMt> Setaria_incra… Setaria incras… NA         Seta… Poace… Poal… Lili… #> 11 <CompdrMt> Borassus_aeth… Borassus aethi… NA         Bora… Areca… Arec… Lili… #> 12 <CompdrMt> Themeda_trian… Themeda triand… NA         Them… Poace… Poal… Lili… #> # ℹ 41 more variables: Phylum <fct>, Kingdom <fct>, OrganismType <fct>, #> #   DicotMonoc <fct>, AngioGymno <fct>, Authors <chr>, Journal <chr>, #> #   YearPublication <chr>, DOI_ISBN <chr>, AdditionalSource <chr>, #> #   StudyDuration <dbl>, StudyStart <dbl>, StudyEnd <dbl>, #> #   ProjectionInterval <chr>, NumberPopulations <dbl>, #> #   MatrixCriteriaSize <fct>, MatrixCriteriaOntogeny <fct>, #> #   MatrixCriteriaAge <fct>, MatrixPopulation <chr>, Lat <dbl>, Lon <dbl>, …"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unflatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","title":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","text":"Converts flattened COM(P)ADRE database (created cdb_flatten) back CompadreDB class","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unflatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","text":"","code":"cdb_unflatten(db)"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unflatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","text":"db data frame created cdb_flatten, columns matrices matA, matU, matF, matC, vectors MatrixClassAuthor, MatrixClassOrganized string representation.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unflatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","text":"CompadreDB object. version details lost   database flattened, Version DateCreated elements   returned CompadreDB object NA.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unflatten.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","text":"Patrick M. Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unflatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconstitute a flattened COM(P)ADRE database (created by cdb_flatten) as a CompadreDB object — cdb_unflatten","text":"","code":"CompadreFlat <- cdb_flatten(Compadre) # flatten Compadre2 <- cdb_unflatten(CompadreFlat) # reconstitute"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","title":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","text":"Unnests CompadreDB object spreading components CompadreMat separate list-columns. Components may extracted include: matA (matrix) matU (matrix) matF (matrix) matC (matrix) MatrixClassAuthor (character vector) MatrixClassOrganized (character vector) MatrixClassNumber (integer vector)","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","text":"","code":"cdb_unnest(   cdb,   components = c(\"matA\", \"matU\", \"matF\", \"matC\", \"MatrixClassAuthor\",     \"MatrixClassOrganized\", \"MatrixClassNumber\") )"},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","text":"cdb CompadreDB object components Character vector specifying components extract. Defaults , .e. c(\"matA\", \"matU\", \"matF\", \"matC\",   \"MatrixClassAuthor\", \"MatrixClassOrganized\", \"MatrixClassNumber\")","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","text":"cdb additional list-columns element argument   components","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unnest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","text":"Patrick M. Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/cdb_unnest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest a COM(P)ADRE database by spreading the components of CompadreMat into separate list-columns — cdb_unnest","text":"","code":"# unnest all components CompadreUnnest <- cdb_unnest(Compadre)  # unnest select components (matU and MatrixClassAuthor) CompadreUnnest <- cdb_unnest(Compadre, c(\"matU\", \"MatrixClassAuthor\"))"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_elementwise_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function element-wise to a list of matrices — mpm_elementwise_apply","title":"Apply a function element-wise to a list of matrices — mpm_elementwise_apply","text":"function applies specified function element-wise corresponding elements across list matrices.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_elementwise_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function element-wise to a list of matrices — mpm_elementwise_apply","text":"","code":"mat_elementwise_apply(x, fun, na_handling = \"stop\", ...)  mpm_elementwise_apply(x, fun, na_handling = \"stop\", ...)"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_elementwise_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function element-wise to a list of matrices — mpm_elementwise_apply","text":"x list matrices. fun function apply elements. na_handling character string specifying handle NA values. Possible values \"stop\" (throw error NA values encountered), \"zero\" (convert NA values 0), \"ignore\" (NA values ignored passed `fun`). Handling can processed appropriately function (e.g., `na.rm`). ... Additional arguments passed `fun`.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_elementwise_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function element-wise to a list of matrices — mpm_elementwise_apply","text":"matrix containing result applying function element-wise   corresponding elements across matrices.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_elementwise_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function element-wise to a list of matrices — mpm_elementwise_apply","text":"","code":"mpms <- Compadre$mat[Compadre$SpeciesAuthor == \"Haplopappus_radiatus\"]  #The object mpms is a list, containing compadre objects class(mpms) #> [1] \"list\" class(mpms[[1]]) #> [1] \"CompadreMat\" #> attr(,\"package\") #> [1] \"Rcompadre\"  # Get the mean, max and min for the matrices mpm_elementwise_apply(mpms, mean) #>   MatrixClassOrganized  MatrixClassAuthor #> 1               active           Seedling #> 2               active Small reproductive #> 3               active Large reproductive #> 4               active       Reproductive #>  #> matA: #>         1      2       3       4 #> 1 0.00000 0.0000 0.00000 1.96575 #> 2 0.19725 0.4090 0.17650 0.15400 #> 3 0.03250 0.1605 0.38175 0.37500 #> 4 0.00000 0.1175 0.26100 0.37150 #>  #> matU: #>         1      2       3      4 #> 1 0.00000 0.0000 0.00000 0.0000 #> 2 0.19725 0.4090 0.17650 0.1540 #> 3 0.03250 0.1605 0.38175 0.3750 #> 4 0.00000 0.1175 0.26100 0.3715 #>  #> matF: #>   1 2 3       4 #> 1 0 0 0 1.96575 #> 2 0 0 0 0.00000 #> 3 0 0 0 0.00000 #> 4 0 0 0 0.00000 #>  #> matC: #>   1 2 3 4 #> 1 0 0 0 0 #> 2 0 0 0 0 #> 3 0 0 0 0 #> 4 0 0 0 0 #>  mpm_elementwise_apply(mpms, max) #>   MatrixClassOrganized  MatrixClassAuthor #> 1               active           Seedling #> 2               active Small reproductive #> 3               active Large reproductive #> 4               active       Reproductive #>  #> matA: #>       1     2     3     4 #> 1 0.000 0.000 0.000 4.033 #> 2 0.385 0.800 0.333 0.449 #> 3 0.095 0.246 0.673 0.750 #> 4 0.000 0.316 0.566 0.621 #>  #> matU: #>       1     2     3     4 #> 1 0.000 0.000 0.000 0.000 #> 2 0.385 0.800 0.333 0.449 #> 3 0.095 0.246 0.673 0.750 #> 4 0.000 0.316 0.566 0.621 #>  #> matF: #>   1 2 3     4 #> 1 0 0 0 4.033 #> 2 0 0 0 0.000 #> 3 0 0 0 0.000 #> 4 0 0 0 0.000 #>  #> matC: #>   1 2 3 4 #> 1 0 0 0 0 #> 2 0 0 0 0 #> 3 0 0 0 0 #> 4 0 0 0 0 #>  mpm_elementwise_apply(mpms, min) #>   MatrixClassOrganized  MatrixClassAuthor #> 1               active           Seedling #> 2               active Small reproductive #> 3               active Large reproductive #> 4               active       Reproductive #>  #> matA: #>       1     2     3     4 #> 1 0.000 0.000 0.000 0.735 #> 2 0.013 0.158 0.019 0.000 #> 3 0.000 0.024 0.200 0.143 #> 4 0.000 0.000 0.096 0.250 #>  #> matU: #>       1     2     3     4 #> 1 0.000 0.000 0.000 0.000 #> 2 0.013 0.158 0.019 0.000 #> 3 0.000 0.024 0.200 0.143 #> 4 0.000 0.000 0.096 0.250 #>  #> matF: #>   1 2 3     4 #> 1 0 0 0 0.735 #> 2 0 0 0 0.000 #> 3 0 0 0 0.000 #> 4 0 0 0 0.000 #>  #> matC: #>   1 2 3 4 #> 1 0 0 0 0 #> 2 0 0 0 0 #> 3 0 0 0 0 #> 4 0 0 0 0 #>   # extract list of matA and take mean mats <- matA(mpms) mat_elementwise_apply(mats, mean) #>         [,1]   [,2]    [,3]    [,4] #> [1,] 0.00000 0.0000 0.00000 1.96575 #> [2,] 0.19725 0.4090 0.17650 0.15400 #> [3,] 0.03250 0.1605 0.38175 0.37500 #> [4,] 0.00000 0.1175 0.26100 0.37150  # This should be the same as mat_mean() mat_mean(mats) #>         A1     A2      A3      A4 #> A1 0.00000 0.0000 0.00000 1.96575 #> A2 0.19725 0.4090 0.17650 0.15400 #> A3 0.03250 0.1605 0.38175 0.37500 #> A4 0.00000 0.1175 0.26100 0.37150  # Mean values, with 25% trimmed from each end mat_elementwise_apply(mats, mean, trim = 0.25) #>        [,1]  [,2]  [,3]   [,4] #> [1,] 0.0000 0.000 0.000 1.5475 #> [2,] 0.1955 0.339 0.177 0.0835 #> [3,] 0.0175 0.186 0.327 0.3035 #> [4,] 0.0000 0.077 0.191 0.3075  # weighted mean, where the second matrix is weighted to 100% and the others to 0% # do demonstrate usage. The result should be the same as mats[[2]] mat_elementwise_apply(mats, weighted.mean, w = c(0,1,0,0)) #>       [,1]  [,2]  [,3]  [,4] #> [1,] 0.000 0.000 0.000 4.033 #> [2,] 0.105 0.483 0.154 0.167 #> [3,] 0.035 0.172 0.673 0.400 #> [4,] 0.000 0.081 0.096 0.350 mats[[2]] #>       A1    A2    A3    A4 #> A1 0.000 0.000 0.000 4.033 #> A2 0.105 0.483 0.154 0.167 #> A3 0.035 0.172 0.673 0.400 #> A4 0.000 0.081 0.096 0.350  #min and max values mat_elementwise_apply(mats, min) #>       [,1]  [,2]  [,3]  [,4] #> [1,] 0.000 0.000 0.000 0.735 #> [2,] 0.013 0.158 0.019 0.000 #> [3,] 0.000 0.024 0.200 0.143 #> [4,] 0.000 0.000 0.096 0.250 mat_elementwise_apply(mats, max) #>       [,1]  [,2]  [,3]  [,4] #> [1,] 0.000 0.000 0.000 4.033 #> [2,] 0.385 0.800 0.333 0.449 #> [3,] 0.095 0.246 0.673 0.750 #> [4,] 0.000 0.316 0.566 0.621  #Demonstrating NA handling #First adding some NA values to the matrices mats[[2]][3,2] <- NA  #replace the NA with a 0 mat_elementwise_apply(mats, min, na_handling = \"zero\") #>       [,1]  [,2]  [,3]  [,4] #> [1,] 0.000 0.000 0.000 0.735 #> [2,] 0.013 0.158 0.019 0.000 #> [3,] 0.000 0.000 0.200 0.143 #> [4,] 0.000 0.000 0.096 0.250  #ignore the NA mat_elementwise_apply(mats, min, na_handling = \"ignore\") #>       [,1]  [,2]  [,3]  [,4] #> [1,] 0.000 0.000 0.000 0.735 #> [2,] 0.013 0.158 0.019 0.000 #> [3,] 0.000    NA 0.200 0.143 #> [4,] 0.000 0.000 0.096 0.250  #ignore the NA, but pass na.rm = TRUE to the function (min) mat_elementwise_apply(mats, min, na_handling = \"ignore\", na.rm = TRUE) #>       [,1]  [,2]  [,3]  [,4] #> [1,] 0.000 0.000 0.000 0.735 #> [2,] 0.013 0.158 0.019 0.000 #> [3,] 0.000 0.024 0.200 0.143 #> [4,] 0.000 0.000 0.096 0.250"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"Calculates element-wise mean list matrices CompadreMat objects constant dimension. difference function mat_mean) (mpm_mean mat_mean takes input list matrices (e.g., list **** matrices) mat_mean takes input list `CompadreMat` objects thus calculates mean matrices **** matrix submatrices (**U**, **F**, **C**).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"","code":"mat_mean(x, na.rm = FALSE)  mpm_mean(x, na.rm = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"x list matrices , mpm_mean list `CompadreMat` objects, dimension na.rm Logical indicating whether missing values excluded (see Details). Defaults FALSE.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"matrix (mat_mean) CompadreMat object (mpm_mean).","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"na.rm == TRUE, missing values ignored calculation mean matrix. na.rm == TRUE given element NA every matrix within x, value returned element 0.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"Patrick Barks <patrick.barks@gmail.com> Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a mean over a list of matrices or CompadreMat objects — mpm_mean","text":"","code":"# there are four rows for species 'Haplopappus_radiatus' in Compadre mpms <- Compadre$mat[Compadre$SpeciesAuthor == \"Haplopappus_radiatus\"]  #The object mpms is a list, containing compadre objects class(mpms) #> [1] \"list\" class(mpms[[1]]) #> [1] \"CompadreMat\" #> attr(,\"package\") #> [1] \"Rcompadre\"  mpm_mean(mpms) #>   MatrixClassOrganized  MatrixClassAuthor #> 1               active           Seedling #> 2               active Small reproductive #> 3               active Large reproductive #> 4               active       Reproductive #>  #> matA: #>         1      2       3       4 #> 1 0.00000 0.0000 0.00000 1.96575 #> 2 0.19725 0.4090 0.17650 0.15400 #> 3 0.03250 0.1605 0.38175 0.37500 #> 4 0.00000 0.1175 0.26100 0.37150 #>  #> matU: #>         1      2       3      4 #> 1 0.00000 0.0000 0.00000 0.0000 #> 2 0.19725 0.4090 0.17650 0.1540 #> 3 0.03250 0.1605 0.38175 0.3750 #> 4 0.00000 0.1175 0.26100 0.3715 #>  #> matF: #>   1 2 3       4 #> 1 0 0 0 1.96575 #> 2 0 0 0 0.00000 #> 3 0 0 0 0.00000 #> 4 0 0 0 0.00000 #>  #> matC: #>   1 2 3 4 #> 1 0 0 0 0 #> 2 0 0 0 0 #> 3 0 0 0 0 #> 4 0 0 0 0 #>   # extract list of matA and take mean mats <- matA(mpms) mat_mean(mats) #>         A1     A2      A3      A4 #> A1 0.00000 0.0000 0.00000 1.96575 #> A2 0.19725 0.4090 0.17650 0.15400 #> A3 0.03250 0.1605 0.38175 0.37500 #> A4 0.00000 0.1175 0.26100 0.37150"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"Calculates element-wise median list matrices CompadreMat objects constant dimension.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"","code":"mat_median(x, na.rm = FALSE)  mpm_median(x, na.rm = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"x list matrices , mpm_sd list `CompadreMat` objects, dimension na.rm Logical indicating whether missing values excluded (see Details). Defaults FALSE.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"matrix containing median element across matrices   list","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"difference function mat_median) (mpm_median mat_median takes input list matrices (e.g., list **** matrices) mat_median takes input list `CompadreMat` objects thus calculates mean matrices **** matrix submatrices (**U**, **F**, **C**). na.rm == TRUE, missing values ignored calculation mean matrix. na.rm == TRUE given element NA every matrix within x, value returned element 0.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"Darren Norris Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a median over a list of matrices or CompadreMat objects — mpm_median","text":"","code":"# set seed for repeatability set.seed(42)  # create a function that generates a matrix with random values create_matrix <- function() {   matrix(runif(9, 0, 1), nrow = 3) }  # use replicate() to call the create_matrix() function 20 times mat_list <- replicate(20, create_matrix(), simplify = FALSE)  # get the median matrix mat_median(mat_list) #>           [,1]      [,2]      [,3] #> [1,] 0.5731547 0.7219267 0.5627341 #> [2,] 0.5862329 0.5077667 0.5146376 #> [3,] 0.5720870 0.4575122 0.6933612  # If the matrices are in an RCompadre object, extract them using `matA` before # passing to `mat_median` my_compadre <- cdb_build_cdb(mat_a = mat_list) #> Warning: Metadata does not include a `SpeciesAccepted` column, so number #>               of species not provided when viewing object. mat_median(matA(my_compadre)) #>           [,1]      [,2]      [,3] #> [1,] 0.5731547 0.7219267 0.5627341 #> [2,] 0.5862329 0.5077667 0.5146376 #> [3,] 0.5720870 0.4575122 0.6933612"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","title":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","text":"Methods extracting stage-class information CompadreMat CompadreDB objects, including whether matrix population model includes one propagule stages (mpm_has_prop), dormant stages (mpm_has_dorm), active stages (mpm_has_active), integer index first active stage class (mpm_first_active). methods return single value passed CompadreMat object, vector values passed CompadreDB object (one value every CompadreMat object within column 'mat').","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","text":"","code":"mpm_has_prop(object)  # S4 method for class 'CompadreMat' mpm_has_prop(object)  # S4 method for class 'CompadreDB' mpm_has_prop(object)  mpm_has_active(object)  # S4 method for class 'CompadreMat' mpm_has_active(object)  # S4 method for class 'CompadreDB' mpm_has_active(object)  mpm_has_dorm(object)  # S4 method for class 'CompadreMat' mpm_has_dorm(object)  # S4 method for class 'CompadreDB' mpm_has_dorm(object)  mpm_first_active(object)  # S4 method for class 'CompadreMat' mpm_first_active(object)  # S4 method for class 'CompadreDB' mpm_first_active(object)"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","text":"object CompadreMat CompadreDB object","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","text":"Patrick Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract stage-class information from CompadreMat or CompadreDB objects — mpm_methods","text":"","code":"# with CompadreMat object mpm_has_prop(Compadre$mat[[1]]) #> [1] FALSE mpm_has_active(Compadre$mat[[1]]) #> [1] TRUE mpm_has_dorm(Compadre$mat[[1]]) #> [1] FALSE mpm_first_active(Compadre$mat[[1]]) #> [1] 1  # with CompadreDB object mpm_has_prop(Compadrempm_has_active(Compadre) #>   [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [49]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [61]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  [97]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [145]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE mpm_has_dorm(Compadrempm_first_active(Compadre) #>   [1]  1  2  1  1  1  1  1  1  1  1  2  2  1  1  2  2  1  1 NA  1  1  2  1  1  1 #>  [26]  1  1  1  1  1  1  1  1  2  1  1  2  1  2  1  2  1  1  1  4  1  2  1  1  2 #>  [51]  2 NA  2  1  2  2  1  2  2  1  1  1  2  1  1  1  1  1  2  1  1  2  1  1  2 #>  [76]  1  3  2  1  1  1  1  2  1  2  1  1  1  1  1  2  1  1  2  2  1  2  1  1  1 #> [101]  1  1  3  2  1  1  1  1  2  2  1  1  2  1  1  1  1  1  1  2  2  1  1  3  1 #> [126]  3  2  1  4  1  2  5  1  1  2  2  1  1  1  1  1  1  2  2  2  1  1  1  2  1"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"Calculates element-wise standard deviation list matrices CompadreMat objects constant dimension.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"","code":"mat_sd(x, na.rm = FALSE)  mpm_sd(x, na.rm = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"x list matrices , mpm_sd list `CompadreMat` objects, dimension na.rm Logical indicating whether missing values excluded (see Details). Defaults FALSE.","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"matrix containing standard deviation element across   matrices list","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"difference function mat_sd) (mpm_sd mat_sd takes input list matrices (e.g., list **** matrices) mat_sd takes input list `CompadreMat` objects thus calculates mean matrices **** matrix submatrices (**U**, **F**, **C**). na.rm == TRUE, missing values ignored calculation mean matrix. na.rm == TRUE given element NA every matrix within x, value returned element 0.","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"Darren Norris Owen R. Jones <jones@biology.sdu.dk>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/mpm_sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a standard deviation over a list of matrices or CompadreMat objects — mpm_sd","text":"","code":"# set seed for repeatability set.seed(42)  # create a function that generates a matrix with random values create_matrix <- function() {   matrix(runif(9, 0, 1), nrow = 3) }  # use replicate() to call the create_matrix() function 20 times mat_list <- replicate(20, create_matrix(), simplify = FALSE)  # get the sd matrix mat_sd(mat_list) #>           [,1]      [,2]      [,3] #> [1,] 0.2853435 0.3059959 0.2933340 #> [2,] 0.2953802 0.2985387 0.3559057 #> [3,] 0.2796275 0.2465055 0.2627704  # If the matrices are in an RCompadre object, extract them using `matA` before # passing to `mat_sd` my_compadre <- cdb_build_cdb(mat_a = mat_list) #> Warning: Metadata does not include a `SpeciesAccepted` column, so number #>               of species not provided when viewing object. mat_sd(matA(my_compadre)) #>           [,1]      [,2]      [,3] #> [1,] 0.2853435 0.3059959 0.2933340 #> [2,] 0.2953802 0.2985387 0.3559057 #> [3,] 0.2796275 0.2465055 0.2627704"},{"path":"https://github.com/jonesor/Rcompadre/reference/string_representation.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vectors or square numeric matrices to and from string representation — string_representation","title":"Convert vectors or square numeric matrices to and from string representation — string_representation","text":"Functions convert vectors square numeric matrices string representation, primarily useful writing data frames list-columns containing vectors matrices flat file format csv. String representations vectors matrices begin open bracket (\"[\") end closed bracket (\"]\"). Matrix elements separated space (\"[0.2 0.3 0.1 0]\") whereas vector elements separate two vertical bars (\"[Seedling||Juvenile||Reproductive]\").","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/string_representation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vectors or square numeric matrices to and from string representation — string_representation","text":"","code":"mat_to_string(mat)  vec_to_string(vec)  string_to_mat(mat_str)  string_to_vec(vec_str, numeric = FALSE)"},{"path":"https://github.com/jonesor/Rcompadre/reference/string_representation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vectors or square numeric matrices to and from string representation — string_representation","text":"mat square numeric matrix vec vector mat_str square numeric matrix string representation vec_str vector string representation numeric Logical value indicating whether string representation vector coerced numeric (FALSE remains character)","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/string_representation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vectors or square numeric matrices to and from string representation — string_representation","text":"square numeric matrix (string_to_mat), vector (string_to_vec), string (mat_to_string vec_to_string).","code":""},{"path":[]},{"path":"https://github.com/jonesor/Rcompadre/reference/string_representation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert vectors or square numeric matrices to and from string representation — string_representation","text":"Owen R. Jones <jones@biology.sdu.dk> Patrick M. Barks <patrick.barks@gmail.com>","code":""},{"path":"https://github.com/jonesor/Rcompadre/reference/string_representation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vectors or square numeric matrices to and from string representation — string_representation","text":"","code":"mat_str <- \"[3.3 5.2 6.1 0.1 NA 0.3 0.2 0.4 0.1]\" mat <- string_to_mat(mat_str)  vec1_str <- \"[0.30||0.42||0.19||0.09]\" vec1 <- string_to_vec(vec1_str, numeric = TRUE)  vec2_str <- \"[Seedling 1||Seedling 2||Juvenile||Reproductive]\" vec2 <- string_to_vec(vec2_str)  # convert back to string format mat_to_string(mat) #> [1] \"[3.3 5.2 6.1 0.1 NA 0.3 0.2 0.4 0.1]\" vec_to_string(vec1) #> [1] \"[0.3||0.42||0.19||0.09]\" vec_to_string(vec2) #> [1] \"[Seedling 1||Seedling 2||Juvenile||Reproductive]\"  if (FALSE) { # \\dontrun{ # non-square matrix mat_str <- \"[0.42 0.52 0.15 0.23 0.14]\" string_to_mat(mat_str) } # }"},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-140","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.4.0","title":"Rcompadre 1.4.0","text":"Added function mpm_elementwise_apply can apply function elements matrix. example, mean, min, max, sd, var etc. allow summaries conveniently made across matrices dimension. Replaces functionality mpm_sd/mat_sd, mpm_median/mat_median mpm_mean/mat_mean, retained backwards compatibility. Removed non-ASCII characters package (including data) satisfy CRAN requirements.","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-130","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.3.0","title":"Rcompadre 1.3.0","text":"CRAN release: 2023-09-02 Minor performance enhancements, speed functions others improve code readability stability. Added functions mpm_sd/mat_sd mpm_median/mat_median join existing mpm_mean/mat_mean functions calculate element-wise summary statistics across MPMs dimension. Code contributed Darren Norris modifications Owen Jones. future version include generic “summarise matrix” function. Increased test coverage.","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-122","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.2.2","title":"Rcompadre 1.2.2","text":"Fixed minor errors causing tests fail.","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-121","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.2.1","title":"Rcompadre 1.2.1","text":"CRAN release: 2023-03-26 Fixed error cdb_build_cdb causing error construction matrix C matrix provided. Fixed technical issue as_tibble.CompadreDB caused build failure platforms.","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-120","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.2.0","title":"Rcompadre 1.2.0","text":"CRAN release: 2023-01-18 Improvements cdb_fetch. Can add comment attribute import. Can download particular versions databases version number. Can force quiet running (messages).","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-110","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.1.0","title":"Rcompadre 1.1.0","text":"CRAN release: 2021-10-15 Added cdb_build_cdb function, allows users build compadreDB objects data Added flag argument cdb_fetch. set TRUE checks cdb_flag run database downloaded process thus streamlining coding. Added additional flags cdb_fetch: check_zero_F checks whether F (sexual reproduction) matrix zeros (TRUE zero) check_zero_U_colsum checks whether columns U matrix zero (.e. whether stages 100% mortality). Updated Compadre Comadre data samples new names AnnualPeriodicity (changed ProjectionInterval) DOI.ISBN (changed DOI_ISBN).","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-100","dir":"Changelog","previous_headings":"","what":"Rcompadre 1.0.0","title":"Rcompadre 1.0.0","text":"CRAN release: 2021-04-30 Released CRAN 20210430","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-030","dir":"Changelog","previous_headings":"","what":"Rcompadre 0.3.0","title":"Rcompadre 0.3.0","text":"Updated DESCRIPTION new contributors. Improved documentation ensure understandable less experienced users. Grouped functions type documentation. Improved vignettes range examples demonstrating range basic complex features. Added argument (check_surv_gte_1) cdb_check check matU elements greater equal 1. Added cdb_metadata function provide easy access metadata (without associated matrices). Matrix accessor functions (matA, matU etc.) now ensure matrices provided named columns rows. Names prefixed matrix type (e.g. A1, A2, A3 U1, U2, U3). Added machine-readable codemeta-data information (codemeta.json) Unit tests improved increase coverage. Modified build checks via continuous integration Travis, Appveyor GitHub actions (including weekly checks).","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-020","dir":"Changelog","previous_headings":"","what":"Rcompadre 0.2.0","title":"Rcompadre 0.2.0","text":"Modifications improve class definitions, renamed CompadreDB CompadreM. Added generic functionality accessor methods via ClassUnionMethods. e.g. functions matA, matU, matF, matC output ,U,F, C matrices database. Added cdb_fetch function obtain latest version COMPADRE COMADRE. database object behaves like data frame complex hierarchical object . Added Tidyverse support dplyr functions can used database (e.g. filter). Generic subsetting methods including subset, [] now work. Database can used magrittr pipes. functions renamed cdb_ prefix, followed verb (e.g. dbCompare becomes cdb_compare cleanDatabase becomes cdb_flag). function cdb_unnest unnests DB spreading matrices separate list columns. function convert2flat replaced cdb_flatten, works entire database rather single matrix. cdb_unflatten reverses procedure. functions also renamed intuitive names. Functions collapseMatrix, identifyReprodStages, rearrangeMatrix, splitMatrix moved Rage package. Added simple vignettes. Added unit tests functions.","code":""},{"path":"https://github.com/jonesor/Rcompadre/news/index.html","id":"rcompadre-010","dir":"Changelog","previous_headings":"","what":"Rcompadre 0.1.0","title":"Rcompadre 0.1.0","text":"First pre-release version! Established S4 class CompadreData definition methods. Established S4 class CompadreM definition methods. Functions checkspecies, check matrix problems (cleanDatabase), Functions manipulate databases: merge databases (mergeDB), compare database versions (dbCompare), subset database (subsetDB). Functions manipulate matrices: collapse matrix smaller number stages (collapseMatrix), convert matrix “flat” format (convert2flat), calculate mean F matrix (getMeanMatF), segregate reproductive/non-reproductive stages rearrangeMatrix, split matrix submatrices (splitMatrix) Function produce matrix string representation stringtomatrix. Added continuous integration.","code":""}]
